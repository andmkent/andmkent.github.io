<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Andrew M. Kent: Posts tagged 'Racket'</title>
 <link rel="self" href="http://www.andmkent.com/feeds/Racket.atom.xml" />
 <link href="http://www.andmkent.com/tags/Racket.html" />
 <id>urn:http-www-andmkent-com:-tags-Racket-html</id>
 <updated>2015-09-15T15:53:52Z</updated>
 <entry>
  <title type="text">Typesetting with PLT Redex</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2015/09/15/typesetting-with-plt-redex/?utm_source=Racket&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2015-09-15-typesetting-with-plt-redex</id>
  <published>2015-09-15T15:53:52Z</published>
  <updated>2015-09-15T15:53:52Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;&lt;a href="http://redex.racket-lang.org/index.html"&gt;PLT Redex&lt;/a&gt; is a great tool for tinkering with and examining various aspects of programming languages. Although it can be used to &lt;em&gt;programmatically generate mathematical figures&lt;/em&gt; for papers and the like (awesome!), the actual machinery for doing so is a little lower level than you want 99% of the time.&lt;/p&gt;

&lt;p&gt;To alleviate this, I developed a package (&lt;a href="https://github.com/andmkent/typeset-rewriter"&gt;typeset-rewriter&lt;/a&gt;) with a few simple tools that make it much easier to build the rewriters redex natively supports.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;To demonstrate, let&amp;rsquo;s take a simple redex model and look at typesetting it.&lt;/p&gt;

&lt;h2 id="stlc-definition"&gt;STLC Definition&lt;/h2&gt;

&lt;p&gt;First we define the language, like the simply typed lambda calculus:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;#lang racket
(require redex)

(define-language STLC
  [x   ::= variable-not-otherwise-mentioned]
  [v   ::= integer true false add1 not zero?]
  [exp ::= x v (if exp_1 exp_2 exp_3)
           (lambda [x : ty] exp) (exp_1 exp_2)]
  [ty  ::= int bool (ty_1 -&amp;gt; ty_2)]
  [Env ::= ([x ty] ...)])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: In this definition we &lt;em&gt;could&lt;/em&gt; have used unicode characters directly (and then typesetting will use those same characters) but we shouldn&amp;rsquo;t feel obligated to. We can throw in all the greek we want when typesetting.&lt;/p&gt;

&lt;p&gt;And maybe we have some judgments and metafunctions:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;
(define-judgment-form STLC
  #:mode (typeof I I O)
  #:contract (typeof Env exp ty)

  [----------------- "T-Val"
   (typeof Env v (val-type v))]
  
  [(where ty (lookup Env x))
   ---------- "T-Var"
   (typeof Env x ty)]

  ....)

(define-metafunction STLC
  val-type : v -&amp;gt; ty
  ....)

(define-metafunction STLC
  extend : Env x ty -&amp;gt; Env
  ....)

(define-metafunction STLC
  lookup : Env x -&amp;gt; ty
  ....)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;"&amp;hellip;" in this case is not special syntax, but just to stand in for the obvious definitions&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="vanilla-typesetting"&gt;Vanilla Typesetting&lt;/h2&gt;

&lt;p&gt;If we were to try and typeset these definitions now, we probably wouldn&amp;rsquo;t be too happy with the result:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(render-judgment-form typeof)
(with-rws (render-language STLC #:nts '(v exp ty Env)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sure, the figures will have the expected shape overall, but maybe we wanted the more traditional &lt;code&gt;Γ&lt;/code&gt; for type environments instead of &lt;code&gt;Env&lt;/code&gt;, and we probably want our typing judgments to look like &lt;code&gt;Γ ⊢ e : τ&lt;/code&gt; instead of the default typesetting  &lt;code&gt;typeof〚Γ, e, τ〛&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="advanced-typesetting"&gt;Advanced Typesetting&lt;/h2&gt;

&lt;p&gt;In addition to a few simple knobs and switches, PLT Redex model typesetting can be enhanced with two forms of rewriters.&lt;/p&gt;

&lt;h3 id="atomic-rewriters"&gt;Atomic rewriters&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://docs.racket-lang.org/search/index.html?q=with-atomic-rewriter"&gt;Atomic rewriters&lt;/a&gt; will get us part of the way there. They allow us to rewrite symbols with provided strings (or thunks returning picts), and things like subscripts are preserved just the way we would hope:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(with-atomic-rewriter
 'Env "Γ"
 (with-atomic-rewriter
  't 'τ
  (render-language STLC #:nts '(v exp ty Env))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;m not sure why there isn&amp;rsquo;t a plural version of this form&amp;hellip; so I went ahead and defined one in the &lt;code&gt;typeset-rewriter&lt;/code&gt; package:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(with-atomic-rws
 (['Env "Γ"] ['exp "e"] ['ty "τ"] ['-&amp;gt; "→"] ['integer "n"])
 (render-language STLC #:nts '(v exp ty Env)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But if we want to get our typing judgment to look correct, we&amp;rsquo;re going to need just a little more muscle.&lt;/p&gt;

&lt;h3 id="compound-rewriters"&gt;Compound Rewriters&lt;/h3&gt;

&lt;p&gt;The hooks for &lt;a href="http://docs.racket-lang.org/search/index.html?q=with-compound-rewriter"&gt;compound rewriters&lt;/a&gt; are pretty powerful. They allow us to transform arbitrary redex terms by letting us specify &lt;em&gt;compound rewriters&lt;/em&gt; to be applied to parenthesized terms with a particular symbol at the head. So if we install a rewriter &lt;code&gt;lambda-rw&lt;/code&gt; before typesetting&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(with-compound-rewriter
 'lambda lambda-rw
 (render-language STLC #:nts '(v exp ty Env)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;any term of the form &lt;code&gt;(lambda any ...)&lt;/code&gt; will be passed to our &lt;code&gt;lambda-rw&lt;/code&gt; procedure.&lt;/p&gt;

&lt;p&gt;This gives us great power&amp;hellip; but if we look at the signature for these rewriters we see theirs a subtle catch:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(listof lw) -&amp;gt; (listof (or/c lw? string? pict?))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have to work with lists of the &lt;code&gt;lw&lt;/code&gt; structs that redex uses to typeset code if we want to tweak how our figures will look.&lt;/p&gt;

&lt;p&gt;To make this more palatable, I built a &lt;code&gt;match-lambda&lt;/code&gt;-like macro that abstracts away all the struct details of our redex terms and lets us use the much simpler &lt;code&gt;quasiquote&lt;/code&gt; and &lt;code&gt;unquote&lt;/code&gt; syntax we&amp;rsquo;re used to working with in Racket &lt;a href="http://docs.racket-lang.org/reference/match.html"&gt;pattern matching&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With these tools, we can define the following rewriters and rewriting context:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;
(require typeset-rewriter)

(define lambda-rw
  (rw-lambda
   [`(lambda ([,x : ,t]) ,body)
    =&amp;gt; (list "λ" x ":" t ". " body)]
   [`(lambda ([,x : ,t]) ,body ,bodies ...)
    =&amp;gt; (list* "λ" x ":" t ". (begin " body (append bodies (list ")")))]))

(define typeof-rw
  (rw-lambda
   [`(typeof ,Γ ,e ,t)
    =&amp;gt; (list "" Γ " ⊢ " e " : " t)]))

(define extend-rw
  (rw-lambda
   [`(extend ,Γ ,x ,t)
    =&amp;gt; (list "" Γ ", " x ":" t)]))

(define lookup-rw
  (rw-lambda
   [`(lookup ,Γ ,x)
    =&amp;gt; (list "" Γ "(" x ")")]))

(define val-type-rw
  (rw-lambda
   [`(val-type ,v)
    =&amp;gt; (list "type-of(" v ")")]))

(define-rw-context with-stlc-rws
  #:atomic (['Env "Γ"] ['exp "e"] ['ty "τ"] ['-&amp;gt; "→"] ['integer "n"])
  #:compound (['lambda lambda-rw]
              ['typeof typeof-rw]
              ['extend extend-rw]
              ['lookup lookup-rw]
              ['val-type val-type-rw]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allows us to produce figures looking just the way we want:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(with-stlc-rws (render-language STLC #:nts '(v exp ty Env)))
(with-stlc-rws (render-judgment-form typeof))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="figure"&gt;&lt;img src="/img/pltredexstlc.png" alt="" /&gt;
 &lt;p class="caption"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;h2 id="further-customizations"&gt;Further Customizations&lt;/h2&gt;

&lt;p&gt;You may have noticed I used a more complex definition for &lt;code&gt;lambda-rw&lt;/code&gt; than seemed necessary:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define lambda-rw
  (rw-lambda
   [`(lambda ([,x : ,t]) ,body)
    =&amp;gt; (list "λ" x ":" t ". " body)]
   [`(lambda ([,x : ,t]) ,body ,bodies ...)
    =&amp;gt; (list* "λ" x ":" t ". (begin " body (append bodies (list ")")))]))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was just to show that the &lt;code&gt;rw&lt;/code&gt; macro is merely a thin layer of syntax that expands into Racket&amp;rsquo;s powerful &lt;code&gt;match&lt;/code&gt; form. Anything following an &lt;code&gt;unquote&lt;/code&gt; (&lt;em&gt;e.g. a &lt;code&gt;,&lt;/code&gt;&lt;/em&gt;) in the &lt;code&gt;quasiquote&lt;/code&gt; pattern can be an arbitrary match pattern, and things like elipses&amp;mdash;since they are supported by &lt;code&gt;match&lt;/code&gt;&amp;mdash;are supported as well.&lt;/p&gt;

&lt;h2 id="installing-and-using-typeset-rewriter"&gt;Installing and using &lt;code&gt;typeset-rewriter&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;From the command line, enter&lt;/p&gt;

&lt;p&gt;&lt;code&gt;raco pkg install typeset-rewriter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or from within DrRacket, open the Package Manager (&lt;code&gt;File&amp;gt;Package Manager&lt;/code&gt; on Mac), enter &lt;code&gt;typeset-rewriter&lt;/code&gt; in the &lt;code&gt;Package Source&lt;/code&gt; field and install.&lt;/p&gt;

&lt;p&gt;After installation, simply add &lt;code&gt;typeset-rewriter&lt;/code&gt; to the list of required packages in your module. Ex &lt;code&gt;(require redex
typeset-rewriter)&lt;/code&gt;.&lt;/p&gt;

&lt;br /&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">C to Racket Examples</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2014/03/24/c-to-racket-examples/?utm_source=Racket&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2014-03-24-c-to-racket-examples</id>
  <published>2014-03-24T13:16:07Z</published>
  <updated>2014-03-24T13:16:07Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;This post is a collection of simple C code snippets and roughly equivalent Racket code.&lt;/p&gt;

&lt;p&gt;Hopefully if you&amp;rsquo;re coming from a C background (or similar) and you&amp;rsquo;re struggling to make sense of Racket code, these examples will assist in clearing the fog.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="more-details"&gt;More details&lt;/h3&gt;

&lt;p&gt;If you wish for a more in depth introduction to Racket, I recommend perusing the excellent &lt;a href="http://docs.racket-lang.org/guide/"&gt;Racket Guide&lt;/a&gt;. If you&amp;rsquo;re curious about a particular function the &lt;a href="http://docs.racket-lang.org/"&gt;Racket manuals&lt;/a&gt; are a great resource. If I&amp;rsquo;ve configured the page correctly, library functions in the code snippets should link to their manual entries.&lt;/p&gt;

&lt;br /&gt;

&lt;p&gt;&lt;em&gt;If your beginning your first venture into the world of  &lt;a href="http://en.wikipedia.org/wiki/Functional_programming"&gt;functional  programming&lt;/a&gt;,  you&amp;rsquo;ll want to do some reading to understand the norms of this world  vs. what&amp;rsquo;s likely been ingrained into your being from years of  imperative programming (sorry I don&amp;rsquo;t have a good reference for this  as I&amp;rsquo;m writing this&amp;hellip;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also, neither the C nor the Racket code is meant to be the epitome  of elegance or ideal programming - they&amp;rsquo;re merely there to  demonstrate how things might be expressed in each language.&lt;/em&gt;&lt;/p&gt;

&lt;br /&gt;

&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
 &lt;li&gt;&lt;a href="#preproc"&gt;Preprocessor Commands&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#variab"&gt;Values and Variables&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#arith"&gt;Arithmetic&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#struct"&gt;Structures&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#array"&gt;Array Indexing&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#scope"&gt;Local/Scoped Definitions&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#fun"&gt;Functions and Conditionals&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#rec"&gt;Recursion&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#list"&gt;Lists and Loops&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#other"&gt;Other&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;br /&gt;

&lt;h2 id="preprocpreprocessor-stuff"&gt;&lt;a name="preproc"&gt;&lt;/a&gt;Preprocessor stuff&lt;/h2&gt;

&lt;h4 id="c-includes"&gt;C includes&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdbool.h&amp;gt;
#include &amp;lt;math.h&amp;gt;
#include &amp;lt;ctype.h&amp;gt;
#include &amp;lt;assert.h&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-lang-and-requires"&gt;Racket #lang and requires&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;#lang racket
; we'll just need the testing suite "rackunit"
; the rest is included in the default racket language
(require rackunit)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="variabvalues-and-variables"&gt;&lt;a name="variab"&gt;&lt;/a&gt;Values and Variables&lt;/h2&gt;

&lt;h3 id="declaration-and-initialization"&gt;Declaration and initialization&lt;/h3&gt;

&lt;h4 id="c-data"&gt;C data&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int b1 = true; // true
int b2 = false; // false (only 0 is false)
int x  = 5; // int
int pi = 3.14; // float 
char c = 'a'; // char
char* str = "Hello World!"; // string

int fibs[6] = {0, 1, 1, 2, 3, 5};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-data"&gt;Racket data&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define b1 #t) ; true, #true is equivalent
(define b2 #f) ; false, #false is equivalent (the only false value)
(define x 5) ; exact-integer
(define pi 3.14) ; flonum
(define c #\a) ; character
(define str "Hello World!") ; string

; singly linked list
(define fibslist (list 0 1 1 2 3 5))
; fixed-length array with constant-time access
(define fibsvec (vector 0 1 1 2 3 5))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: small note, by default Racket lists are immutable and vectors are mutable. Alternate versions of either are available as well (see docs).&lt;/p&gt;

&lt;h3 id="assignment-mutation"&gt;Assignment (Mutation)&lt;/h3&gt;

&lt;h4 id="c-assignment-mutation"&gt;C Assignment (Mutation)&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int x = 10; // initialization
x = 5; // assignment/mutation
assert(x == 5);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-mutation"&gt;Racket Mutation&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define x 10) ; initialization
(set! x 5) ; mutation
(check-equal? x 5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="aritharithmetic"&gt;&lt;a name="arith"&gt;&lt;/a&gt;Arithmetic&lt;/h2&gt;

&lt;h4 id="c-math"&gt;C math&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int y = 1 + 2 + 3;
assert(y == 6);

int z = (4 + (2 * 3)) / 5;
assert(z == 2);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-math"&gt;Racket math&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define y (+ 1 2 3))
(check-equal? y 6)

(define z (/ (+ (* 2 3)
                4)
             5))
(check-equal? z 2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="structstructures"&gt;&lt;a name="struct"&gt;&lt;/a&gt;Structures&lt;/h2&gt;

&lt;h3 id="structure-definitions"&gt;Structure Definitions&lt;/h3&gt;

&lt;h4 id="c-structs"&gt;C structs&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;struct point {
    int x;
    int y;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-structs"&gt;Racket structs&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define-struct point (x y))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: small note, Racket structs are immutable by default. Mutable structs are available (see docs).&lt;/p&gt;

&lt;h3 id="structure-usage"&gt;Structure Usage&lt;/h3&gt;

&lt;h4 id="c-struct-accessors"&gt;C struct accessors&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;struct point p = {.x = 3, .y = 4};
assert(p.x == 3);
assert(p.y == 4);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-struct-accessors"&gt;Racket struct accessors&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define p (point 3 4))
(check-equal? (point-x p) 3)
(check-equal? (point-y p) 4)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="arrayconstant-time-array-access"&gt;&lt;a name="array"&gt;&lt;/a&gt;Constant-time array access&lt;/h2&gt;

&lt;h4 id="c-array-indexing"&gt;C array indexing&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int fibs[6] = {0, 1, 1, 2, 3, 5};
assert(fibs[4] == 3);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-vector-ref"&gt;Racket vector-ref&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define fibs (vector 0 1 1 2 3 5))
(check-equal? (vector-ref fibs 4) 3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="scopelocalscoped-definitions-blocks-and-lets"&gt;&lt;a name="scope"&gt;&lt;/a&gt;Local/Scoped Definitions (blocks and lets)&lt;/h2&gt;

&lt;h4 id="c--blocks"&gt;C {} blocks&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int x = 5;

{
    int x = 10;
    assert(x == 10);
}
    
assert(x == 5);

{
   int x = 1;
   int y = x + 10;
   assert(y == 11);
}

assert(x == 5);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-let-expressions"&gt;Racket let expressions&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define x 5)
(let ([x 10])
  (check-equal? x 10))

(check-equal? x 5)

(let* ([x 1]
       [y (+ x 10)])
  (check-equal? y 11))

(check-equal? x 5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: let* allows definitions to reference identifiers previously declared in the list of let bindings&lt;/em&gt;&lt;/p&gt;

&lt;br /&gt;

&lt;h2 id="funfunction-definitions"&gt;&lt;a name="fun"&gt;&lt;/a&gt;Function Definitions&lt;/h2&gt;

&lt;h3 id="basic-functions"&gt;Basic Functions&lt;/h3&gt;

&lt;h4 id="c-simple-function"&gt;C simple function&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int square(int x) {
    return x * x;
}

assert(square(3) == 9);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-simple-function"&gt;Racket simple function&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (square x)
  (* x x))

(check-equal? (square 3) 9)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: C functions are a series of statements with some specified &amp;ldquo;return&amp;rdquo; statement that dictates what the function call evaluates to (except for void, but you get the idea). Racket functions are more like a mathematical expression that is merely simplified/evaluated to some value and that value is returned.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id="functions-that-require-in-order-execution"&gt;Functions that &lt;em&gt;require&lt;/em&gt; in order execution&lt;/h3&gt;

&lt;h4 id="c-command-line-interaction"&gt;C command line interaction&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int square_input() {
    char str[50];
    int num;

    printf("\n Enter input: ");
    scanf("%[^\n]+", str);

    num = atoi(str);

    return num * num;
}

// Enter number: 7
// 49&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-command-line-interaction--begin"&gt;Racket command line interaction &amp;amp; begin&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (square-input)
  (begin
    (printf "\n Enter number: ")
    (define input (read))
    (* input input)))

; Enter number: 9
; 81&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="functions-with-conditional-control-flow"&gt;Functions with Conditional Control Flow&lt;/h3&gt;

&lt;h4 id="c-if-else"&gt;C if-else&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int int_abs(int x) {
    if (x &amp;lt; 0)
        return (-1) * x;
    else
        return x;
}

assert(int_abs(1) == 1);
assert(int_abs(-1) == 1);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-if-else"&gt;Racket if-else&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (int-abs x)
  (if (&amp;lt; x 0)
      (* -1 x)
      x))

(check-equal? (int-abs 1) 1)
(check-equal? (int-abs -1) 1)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-if-else-if-else-if"&gt;C if-else-if-else-if&amp;hellip;&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;// returns number of real roots that exist
int real_quad_roots(int a, int b, int c) {
    float d = (b*b) - 4.0*a*c;

    if (d &amp;lt; 0) {
        return 0;
    } else if (d == 0) {
        return 1;
    } else {
        return 2;
    }
}

// (2x+2)(x-5) = 2x^2 - 8x - 10
assert(real_quad_roots(2, -8, -10) == 2);
// (x-5)(x-5) = x^2 - 10x + 25
assert(real_quad_roots(1, -10, 25) == 1);
// x^2 + 4   no roots
assert(real_quad_roots(1, 0, 4) == 0);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-if-else-if-else-ie-cond"&gt;Racket if-else-if-else&amp;hellip; &lt;em&gt;i.e.&lt;/em&gt; cond&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (real-quad-roots a b c)
  (let ([d (- (* b b)
              (* 4 a c))])
    (cond
      [(&amp;lt; d 0) 0]
      [(= d 0) 1]
      [else    2])))

(check-equal? (real-quad-roots 2 -8 -10)
              2)
(check-equal? (real-quad-roots 1 -10 25)
              1)
(check-equal? (real-quad-roots 1 0 4)
              0)

; We can also use internal defines instead of a let:
(define (real-quad-roots2 a b c)
  (define d (- (* b b)
               (* 4 a c)))
  (cond
    [(&amp;lt; d 0) 0]
    [(= d 0) 1]
    [else    2]))

; defines inside functions act just like the let version above, and
; you can just stick them in there (they don't have to contain a "body
; expression" like a let)

(check-equal? (real-quad-roots2 2 -8 -10)
              2)
(check-equal? (real-quad-roots2 1 -10 25)
              1)
(check-equal? (real-quad-roots2 1 0 4)
              0)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-function-with-structs"&gt;C function with structs&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;float distance(struct point *p1, 
               struct point *p2) {
    assert(p1 != NULL &amp;amp;&amp;amp; p2 != NULL);

    int dx = p1-&amp;gt;x - p2-&amp;gt;x;
    int dy = p1-&amp;gt;y - p2-&amp;gt;y;

    return sqrt((dx * dx) + (dy * dy));
}

struct point p1 = {.x = 0, .y = 0};
struct point p2 = {.x = 3, .y = 4};
assert(distance(&amp;amp;p1, &amp;amp;p2) == 5);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-function-with-structs"&gt;Racket function with structs&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (distance p1 p2)
  (begin
    (when (not (and (point? p1) 
                    (point? p2)))
      (error 'distance "Error - invalid parameter"))
    (let ([dx (- (point-x p1)
                 (point-x p2))]
          [dy (- (point-y p1)
                 (point-y p2))])
      (sqrt (+ (* dx dx)
               (* dy dy))))))

(define p1 (point 0 0))
(define p2 (point 3 4))
(check-equal? (distance p1 p2) 5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="recrecursive-functions"&gt;&lt;a name="rec"&gt;&lt;/a&gt;Recursive Functions&lt;/h2&gt;

&lt;h4 id="c-recursion"&gt;C recursion&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;long factorial_rec(int n)
{
  if (n == 0)
    return 1;
  else
    return(n * factorial(n-1));
}

assert(factorial(5) == 120);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-recursion"&gt;Racket recursion&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (factorial x)
  (if (zero? x)
      1
      (* x (factorial (sub1 x)))))

(check-equal? (factorial 5) 120)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-recursion-on-linked-lists"&gt;C recursion on linked lists&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;// a non-empty linked list
// is an element (first) followed by
// a linked list (the rest)
struct list {
    int first;
    struct list* rest;
};

int length(struct list* l) {
    if (l == NULL)
        return 0;
    else
        return 1 + length(l-&amp;gt;rest);
}

struct list node3 = {.first = 2, .rest = NULL};
struct list node2 = {.first = 1, .rest = &amp;amp;node3};
struct list node1 = {.first = 0, .rest = &amp;amp;node2};

assert(length(&amp;amp;node1) == 3);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-recursion-on-lists"&gt;Racket recursion on lists&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;
; Lists in Racket?
(check-equal? empty empty)
(check-equal? (list 1) (cons 1 empty))
(check-equal? (list 1 2) (cons 1 (cons 2 empty)))
; list is shorthand for lists built with cons
(check-equal? (first (list 1 2)) 1)
(check-equal? (rest (list 1 2)) (cons 2 empty))

(define (length l)
  (cond
    [(empty? l)
     0]
    [else
     (add1 (length (rest l)))]))

(check-equal? (length (list 0 2 4)) 
              3)
(check-equal? (length (cons 0 (cons 2 (cons 4 empty)))) 
              3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="listlists-and-loops"&gt;&lt;a name="list"&gt;&lt;/a&gt;Lists and Loops&lt;/h2&gt;

&lt;h4 id="c-recursive-list-building"&gt;C recursive list building&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;// builds list 0 through (i-1) from back
// to front
#define make_range(n) range_loop(n, NULL)
struct list* range_loop(int i, struct list *rest) {
    if (i &amp;gt; 0) {
        struct list *new = malloc(sizeof(struct list));
        new-&amp;gt;first = i - 1;
        new-&amp;gt;rest = rest;

        return range_loop(i - 1, new);
    } 
    else {
        return rest;    
    }
}

struct list *l = make_range(3);
// we verify (painfully) the list is indeed [0, 1, 2]
assert(l-&amp;gt;first == 0);
assert(l-&amp;gt;rest-&amp;gt;first == 1);
assert(l-&amp;gt;rest-&amp;gt;rest-&amp;gt;first == 2);
assert(l-&amp;gt;rest-&amp;gt;rest-&amp;gt;rest == NULL);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-recursive-list-construction-using-a-let-loop"&gt;Racket recursive list construction (using a &amp;ldquo;let-loop&amp;rdquo;)&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;; return list of numbers 0 to (n-1)
(define (make-range n)
  (let range-loop ([i n]
                   [l empty])
    (if (positive? i)
        (range-loop (sub1 i)
                    (cons (sub1 i) l))
        l)))

(check-equal? (make-range 3)
              (list 0 1 2))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-list-sum-with-loop"&gt;C list sum with loop&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int listsum(struct list* l) {
    struct list* i = l;
    int sum = 0;
    while (i != NULL) {
        sum = sum + i-&amp;gt;first;
        i = i-&amp;gt;rest;
    }

    return sum;
}

// make_range from previous example
// builds list of 0 through (n-1)
assert(listsum(make_range(4)) == 6);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-list-sum-with-for-loop"&gt;Racket list sum with for loop&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (listsum l)
  (define sum 0)
  (begin (for ([i l])
           (set! sum (+ sum i)))
         sum))

; make-range from previous example
(check-equal? (listsum (make-range 4)) 6)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-list-building-loop"&gt;C list building loop&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;struct list* n_evens(int n) {
    int i, value;
    struct list *head, *prev;
    head = prev = NULL;

    for (i = 0; i &amp;lt; n; i++) {
        value = 2 * i;
        struct list *new = malloc(sizeof(struct list));
        new-&amp;gt;first = value;
        if (prev != NULL)
            prev-&amp;gt;rest = new;
        else
            head = new;
        prev = new;
    }

    prev-&amp;gt;rest = NULL;

    return head;
}

l = n_evens(3); // l = [0, 2, 4]
assert(l-&amp;gt;first == 0);
assert(l-&amp;gt;rest-&amp;gt;first == 2);
assert(l-&amp;gt;rest-&amp;gt;rest-&amp;gt;first == 4);
assert(l-&amp;gt;rest-&amp;gt;rest-&amp;gt;rest == NULL);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-forlist-loop"&gt;Racket for/list loop&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;; make-range is built into Racket, and is called just range:
(check-equal? (range 3) (list 0 1 2))

; Builds list of the first n even natural numbers
(define (n-evens n)
  (for/list ([i (range n)])
    (* 2 i)))

(check-equal? (n-evens 3) (list 0 2 4))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-loop-that-finds-max-integer"&gt;C loop that finds max integer&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int max_in_list(struct list *l) {
    int max = l-&amp;gt;first;
    struct list *i = l-&amp;gt;rest;

    while (i != NULL) {
        if (max &amp;lt; i-&amp;gt;first)
            max = i-&amp;gt;first;
        else
            max = max;

        i = i-&amp;gt;rest;
    }

    return max;
}

struct list l3 = {.first = 12, .rest = NULL};
struct list l2 = {.first = 99, .rest = &amp;amp;l3};
struct list l1 = {.first = 42, .rest = &amp;amp;l2};
assert(max_in_list(&amp;amp;l1) == 99);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-forfold-loop-that-finds-max-integer"&gt;Racket for/fold loop that finds max integer&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (max-in-list l)
  (for/fold ([max (first l)]) ([i (rest l)])
    (if (&amp;lt; max i)
        i
        max)))

(check-equal? (max-in-list (list 42 99 12)) 99)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/html&gt;</content></entry></feed>