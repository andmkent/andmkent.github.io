<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Andrew M. Kent: Andrew M. Kent</title>
 <link rel="self" href="http://www.andmkent.com/feeds/all.atom.xml" />
 <link href="http://www.andmkent.com/index.html" />
 <id>urn:http-www-andmkent-com:-index-html</id>
 <updated>2015-11-22T16:29:06Z</updated>
 <entry>
  <title type="text">New Draft Paper: Occurrence Typing Modulo Theories</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2015/11/22/new-draft-paper-occurrence-typing-modulo-theories/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2015-11-22-new-draft-paper-occurrence-typing-modulo-theories</id>
  <published>2015-11-22T16:29:06Z</published>
  <updated>2015-11-22T16:29:06Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;A &lt;a href="http://arxiv.org/abs/1511.07033"&gt;draft paper&lt;/a&gt; describing our approach to extending Typed Racket with dependent refinement types and arbitrary solver-backed theories is now available!&lt;/p&gt;

&lt;p&gt;Looking forward to bringing these ideas to the Typed Racket to our users at large.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Typesetting with PLT Redex</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2015/09/15/typesetting-with-plt-redex/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2015-09-15-typesetting-with-plt-redex</id>
  <published>2015-09-15T15:53:52Z</published>
  <updated>2015-09-15T15:53:52Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;&lt;a href="http://redex.racket-lang.org/index.html"&gt;PLT Redex&lt;/a&gt; is a great tool for tinkering with and examining various aspects of programming languages. Although it can be used to &lt;em&gt;programmatically generate mathematical figures&lt;/em&gt; for papers and the like (awesome!), the actual machinery for doing so is a little lower level than you want 99% of the time.&lt;/p&gt;

&lt;p&gt;To alleviate this, I developed a package (&lt;a href="https://github.com/andmkent/typeset-rewriter"&gt;typeset-rewriter&lt;/a&gt;) with a few simple tools that make it much easier to build the rewriters redex natively supports.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;To demonstrate, let&amp;rsquo;s take a simple redex model and look at typesetting it.&lt;/p&gt;

&lt;h2 id="stlc-definition"&gt;STLC Definition&lt;/h2&gt;

&lt;p&gt;First we define the language, like the simply typed lambda calculus:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;#lang racket
(require redex)

(define-language STLC
  [x   ::= variable-not-otherwise-mentioned]
  [v   ::= integer true false add1 not zero?]
  [exp ::= x v (if exp_1 exp_2 exp_3)
           (lambda [x : ty] exp) (exp_1 exp_2)]
  [ty  ::= int bool (ty_1 -&amp;gt; ty_2)]
  [Env ::= ([x ty] ...)])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: In this definition we &lt;em&gt;could&lt;/em&gt; have used unicode characters directly (and then typesetting will use those same characters) but we shouldn&amp;rsquo;t feel obligated to. We can throw in all the greek we want when typesetting.&lt;/p&gt;

&lt;p&gt;And maybe we have some judgments and metafunctions:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;
(define-judgment-form STLC
  #:mode (typeof I I O)
  #:contract (typeof Env exp ty)

  [----------------- "T-Val"
   (typeof Env v (val-type v))]
  
  [(where ty (lookup Env x))
   ---------- "T-Var"
   (typeof Env x ty)]

  ....)

(define-metafunction STLC
  val-type : v -&amp;gt; ty
  ....)

(define-metafunction STLC
  extend : Env x ty -&amp;gt; Env
  ....)

(define-metafunction STLC
  lookup : Env x -&amp;gt; ty
  ....)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;"&amp;hellip;" in this case is not special syntax, but just to stand in for the obvious definitions&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="vanilla-typesetting"&gt;Vanilla Typesetting&lt;/h2&gt;

&lt;p&gt;If we were to try and typeset these definitions now, we probably wouldn&amp;rsquo;t be too happy with the result:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(render-judgment-form typeof)
(with-rws (render-language STLC #:nts '(v exp ty Env)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sure, the figures will have the expected shape overall, but maybe we wanted the more traditional &lt;code&gt;Γ&lt;/code&gt; for type environments instead of &lt;code&gt;Env&lt;/code&gt;, and we probably want our typing judgments to look like &lt;code&gt;Γ ⊢ e : τ&lt;/code&gt; instead of the default typesetting  &lt;code&gt;typeof〚Γ, e, τ〛&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="advanced-typesetting"&gt;Advanced Typesetting&lt;/h2&gt;

&lt;p&gt;In addition to a few simple knobs and switches, PLT Redex model typesetting can be enhanced with two forms of rewriters.&lt;/p&gt;

&lt;h3 id="atomic-rewriters"&gt;Atomic rewriters&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://docs.racket-lang.org/search/index.html?q=with-atomic-rewriter"&gt;Atomic rewriters&lt;/a&gt; will get us part of the way there. They allow us to rewrite symbols with provided strings (or thunks returning picts), and things like subscripts are preserved just the way we would hope:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(with-atomic-rewriter
 'Env "Γ"
 (with-atomic-rewriter
  't 'τ
  (render-language STLC #:nts '(v exp ty Env))))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;m not sure why there isn&amp;rsquo;t a plural version of this form&amp;hellip; so I went ahead and defined one in the &lt;code&gt;typeset-rewriter&lt;/code&gt; package:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(with-atomic-rws
 (['Env "Γ"] ['exp "e"] ['ty "τ"] ['-&amp;gt; "→"] ['integer "n"])
 (render-language STLC #:nts '(v exp ty Env)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But if we want to get our typing judgment to look correct, we&amp;rsquo;re going to need just a little more muscle.&lt;/p&gt;

&lt;h3 id="compound-rewriters"&gt;Compound Rewriters&lt;/h3&gt;

&lt;p&gt;The hooks for &lt;a href="http://docs.racket-lang.org/search/index.html?q=with-compound-rewriter"&gt;compound rewriters&lt;/a&gt; are pretty powerful. They allow us to transform arbitrary redex terms by letting us specify &lt;em&gt;compound rewriters&lt;/em&gt; to be applied to parenthesized terms with a particular symbol at the head. So if we install a rewriter &lt;code&gt;lambda-rw&lt;/code&gt; before typesetting&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(with-compound-rewriter
 'lambda lambda-rw
 (render-language STLC #:nts '(v exp ty Env)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;any term of the form &lt;code&gt;(lambda any ...)&lt;/code&gt; will be passed to our &lt;code&gt;lambda-rw&lt;/code&gt; procedure.&lt;/p&gt;

&lt;p&gt;This gives us great power&amp;hellip; but if we look at the signature for these rewriters we see theirs a subtle catch:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(listof lw) -&amp;gt; (listof (or/c lw? string? pict?))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have to work with lists of the &lt;code&gt;lw&lt;/code&gt; structs that redex uses to typeset code if we want to tweak how our figures will look.&lt;/p&gt;

&lt;p&gt;To make this more palatable, I built a &lt;code&gt;match-lambda&lt;/code&gt;-like macro that abstracts away all the struct details of our redex terms and lets us use the much simpler &lt;code&gt;quasiquote&lt;/code&gt; and &lt;code&gt;unquote&lt;/code&gt; syntax we&amp;rsquo;re used to working with in Racket &lt;a href="http://docs.racket-lang.org/reference/match.html"&gt;pattern matching&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With these tools, we can define the following rewriters and rewriting context:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;
(require typeset-rewriter)

(define lambda-rw
  (rw-lambda
   [`(lambda ([,x : ,t]) ,body)
    =&amp;gt; (list "λ" x ":" t ". " body)]
   [`(lambda ([,x : ,t]) ,body ,bodies ...)
    =&amp;gt; (list* "λ" x ":" t ". (begin " body (append bodies (list ")")))]))

(define typeof-rw
  (rw-lambda
   [`(typeof ,Γ ,e ,t)
    =&amp;gt; (list "" Γ " ⊢ " e " : " t)]))

(define extend-rw
  (rw-lambda
   [`(extend ,Γ ,x ,t)
    =&amp;gt; (list "" Γ ", " x ":" t)]))

(define lookup-rw
  (rw-lambda
   [`(lookup ,Γ ,x)
    =&amp;gt; (list "" Γ "(" x ")")]))

(define val-type-rw
  (rw-lambda
   [`(val-type ,v)
    =&amp;gt; (list "type-of(" v ")")]))

(define-rw-context with-stlc-rws
  #:atomic (['Env "Γ"] ['exp "e"] ['ty "τ"] ['-&amp;gt; "→"] ['integer "n"])
  #:compound (['lambda lambda-rw]
              ['typeof typeof-rw]
              ['extend extend-rw]
              ['lookup lookup-rw]
              ['val-type val-type-rw]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allows us to produce figures looking just the way we want:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(with-stlc-rws (render-language STLC #:nts '(v exp ty Env)))
(with-stlc-rws (render-judgment-form typeof))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="figure"&gt;&lt;img src="/img/pltredexstlc.png" alt="" /&gt;
 &lt;p class="caption"&gt;&lt;/p&gt;&lt;/div&gt;

&lt;h2 id="further-customizations"&gt;Further Customizations&lt;/h2&gt;

&lt;p&gt;You may have noticed I used a more complex definition for &lt;code&gt;lambda-rw&lt;/code&gt; than seemed necessary:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define lambda-rw
  (rw-lambda
   [`(lambda ([,x : ,t]) ,body)
    =&amp;gt; (list "λ" x ":" t ". " body)]
   [`(lambda ([,x : ,t]) ,body ,bodies ...)
    =&amp;gt; (list* "λ" x ":" t ". (begin " body (append bodies (list ")")))]))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This was just to show that the &lt;code&gt;rw&lt;/code&gt; macro is merely a thin layer of syntax that expands into Racket&amp;rsquo;s powerful &lt;code&gt;match&lt;/code&gt; form. Anything following an &lt;code&gt;unquote&lt;/code&gt; (&lt;em&gt;e.g. a &lt;code&gt;,&lt;/code&gt;&lt;/em&gt;) in the &lt;code&gt;quasiquote&lt;/code&gt; pattern can be an arbitrary match pattern, and things like elipses&amp;mdash;since they are supported by &lt;code&gt;match&lt;/code&gt;&amp;mdash;are supported as well.&lt;/p&gt;

&lt;h2 id="installing-and-using-typeset-rewriter"&gt;Installing and using &lt;code&gt;typeset-rewriter&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;From the command line, enter&lt;/p&gt;

&lt;p&gt;&lt;code&gt;raco pkg install typeset-rewriter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or from within DrRacket, open the Package Manager (&lt;code&gt;File&amp;gt;Package Manager&lt;/code&gt; on Mac), enter &lt;code&gt;typeset-rewriter&lt;/code&gt; in the &lt;code&gt;Package Source&lt;/code&gt; field and install.&lt;/p&gt;

&lt;p&gt;After installation, simply add &lt;code&gt;typeset-rewriter&lt;/code&gt; to the list of required packages in your module. Ex &lt;code&gt;(require redex
typeset-rewriter)&lt;/code&gt;.&lt;/p&gt;

&lt;br /&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">STOP 2015 Talk: Adding Practical Dependent Types to Typed Racket</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2015/07/06/stop-2015-talk-adding-practical-dependent-types-to-typed-racket/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2015-07-06-stop-2015-talk-adding-practical-dependent-types-to-typed-racket</id>
  <published>2015-07-06T13:16:07Z</published>
  <updated>2015-07-06T13:16:07Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;At the &lt;a href="http://2015.ecoop.org/track/STOP2015"&gt;Scripts to Programs 2015&lt;/a&gt; workshop (co-located with ECOOP 2015) I gave a talk reporting on our upcoming addition of some basic dependent types to Typed Racket.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id="abstract"&gt;Abstract&lt;/h2&gt;

&lt;p&gt;Typed Racket is a statically typed dialect of Racket that allows idiomatic Racket programs to be enriched with types. It can reason about many dynamically typed programming patterns while providing sound interoperability and optimizations. We have designed and are implementing an extension to Typed Racket which adds support for logical refinement types and linear integer constraints. This summary discusses our approach to implementing this novel combination of precise specifications and optimizations while maintaining sound interoperability with dynamically typed code. A PLT Redex model of the basic calculus describing our extension can be seen at https://github.com/andmkent/stop2015-redex and our development fork where we are extending Typed Racket is available at https://github.com/andmkent/typed-racket/tree/dtr-prototype.&lt;/p&gt;

&lt;h2 id="overview-of-additions-to-typed-racket"&gt;Overview of Additions to Typed Racket&lt;/h2&gt;

&lt;p&gt;This extension involves adding just a few simple forms to Typed Racket.&lt;/p&gt;

&lt;p&gt;First, we need to add a type which can express dependencies within it. We do this with refinement types:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(Refine [x : T] P(x))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This intuitively describes all values &lt;code&gt;x&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt; where proposition &lt;code&gt;P(x)&lt;/code&gt; holds.&lt;/p&gt;

&lt;p&gt;Today Typed Racket &lt;em&gt;already&lt;/em&gt; reasons about some basic propositions:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;code&gt;(x -: T)&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is of type &lt;code&gt;T&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;code&gt;(x -! T)&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is not of type &lt;code&gt;T&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;code&gt;(and P ...)&lt;/code&gt;, standard logical &lt;em&gt;and&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;code&gt;(or P ...)&lt;/code&gt;, standard logical &lt;em&gt;or&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;This is how Typed Racket can typecheck programs using type-tests in &lt;code&gt;if&lt;/code&gt; statements, etc&amp;hellip;&lt;/p&gt;

&lt;p&gt;Next we add propositions which can talk about linear inequalities:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;((+ x (* 3 y)) ≤ 42)&lt;/code&gt;, the linear combination &lt;code&gt;(+ x (* 3 y))&lt;/code&gt; is less than or equal to &lt;code&gt;42&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;These propositions can only reference linear combinations of integers (&lt;em&gt;e.g. no 1.5 or (* x y)&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id="examples-with-refinements-and-dependent-types"&gt;Examples with Refinements and Dependent Types&lt;/h2&gt;

&lt;p&gt;Here are two examples of programs we can write with these new forms. Both utilize &lt;code&gt;safe-vector-&lt;/code&gt; operations, whose type requires the index to be verified statically (and they can therefore omit the runtime bounds-check).&lt;/p&gt;

&lt;h3 id="vector-dot-product"&gt;Vector Dot Product&lt;/h3&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;
(: dot-prod (~&amp;gt; [A : (Vecof Int)]
                [B : (Refine [v : (Vecof Int)]
                             (= (len v) (len A)))]
                Int))
(define (dot-prod A B)
  (for/sum ([i (in-range (len A))])
    (* (safe-vector-ref A i)
       (safe-vector-ref B i))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="matrix-multiplication"&gt;Matrix Multiplication&lt;/h3&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;
(define-syntax-rule (Mref M r c)
  (safe-vector-ref (safe-vector-ref M r) c))

(define-syntax-rule (Mset! M r c val)
  (safe-vector-set! (safe-vector-ref M r) c val))

;; A[m×n] * B[n×p] = C[m×p]) 
(: matrix*
   (~&amp;gt; [A : (Vec (Refine [a : (Vec Int)] (= (len a) n)))]
       [B : (Vec (Refine [b : (Vec Int)] (= (len b) p)))]
       [C : (Vec (Refine [c : (Vec Int)] (= (len c) p)))]
       [m : (Refine [x : Nat] (= x (len A) (len C)))]
       [n : (Refine [y : Nat] (= y (len B)))]
       [p : Nat]
       Void))
(define (matrix* A B C m n p)
  (for* ([i : (Refine [x : Nat] (&amp;lt; x m))
            (in-range m)]
         [j : (Refine [y : Nat] (&amp;lt; y p))
            (in-range p)])
    (define Cij-val : Int
      (for/sum ([k : (Refine [z : Nat] (&amp;lt; z n))
                   (in-range n)])
        (+ (Mref A i k) (Mref B k j))))
    (Mset! C i j Cij-val)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="vector-bounds-case-study"&gt;Vector Bounds Case Study&lt;/h2&gt;

&lt;p&gt;We performed a case study analyzing how many instances of &lt;code&gt;vector-ref&lt;/code&gt; and &lt;code&gt;vector-set!&lt;/code&gt; we could automatically verify without any modifications to the code. In approximately 57k lines of code drawn from Racket&amp;rsquo;s &lt;a href="http://docs.racket-lang.org/math/"&gt;math&lt;/a&gt;, &lt;a href="http://docs.racket-lang.org/plot/index.html?q=plot"&gt;plot&lt;/a&gt;, and &lt;a href="https://github.com/ntoronto/pict3d"&gt;pict3d&lt;/a&gt; libraries we successfully could verify the vector operations about 50% of the time.&lt;/p&gt;

&lt;p&gt;We will report in more detail on these findings in an upcoming publication.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Let-aliasing in Typed Racket</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2014/12/20/let-aliasing-in-typed-racket/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2014-12-20-let-aliasing-in-typed-racket</id>
  <published>2014-12-20T13:23:08Z</published>
  <updated>2014-12-20T13:23:08Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;Although Typed Racket (TR) &lt;span style="font-style: italic"&gt;can&lt;/span&gt; currently typecheck a large number
of common idioms found in Racket code, reasoning about direct and indirect
usages of aliasing has escaped its grasp... until now!&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;&lt;a name="(part._.Motivation_for_.Aliasing)"&gt;&lt;/a&gt;Motivation for Aliasing&lt;/h1&gt;

&lt;p&gt;Typed Racket&amp;rsquo;s use of logical propositions about types enables
it to typecheck programs whose control flows don&amp;rsquo;t neatly fit
within the realm of what traditional type systems can check.&lt;/p&gt;

&lt;p&gt;Here, for example, the type checker recognizes the result of
&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt; has type-related implications, whether it
evaluates to &lt;span class="RktVal"&gt;#t&lt;/span&gt; or &lt;span class="RktVal"&gt;#f&lt;/span&gt;:&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;foo&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Any&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;size&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;cond&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;else&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktVal"&gt;42&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s great&amp;ndash;but if we introduce just a little indirection:&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;foo-let&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Any-&amp;gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;foo-let&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;let&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;cond&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;else&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktVal"&gt;42&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;does&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;not&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;typecheck&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;in&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;Racket&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;version&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;6.1.1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;=(&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We discover that, even though &lt;span class="RktSym"&gt;y&lt;/span&gt; was bound to &lt;span class="RktSym"&gt;x&lt;/span&gt;,
that information does not make it into the type-system.
Instead, the only information that relates the two values is
(more or less) the following three propositions:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt; is of type &lt;span class="RktSym"&gt;Any&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;If &lt;span class="RktSym"&gt;y&lt;/span&gt; evaluates to &lt;span class="RktVal"&gt;#f&lt;/span&gt;, &lt;span class="RktSym"&gt;x&lt;/span&gt;
   is of type &lt;span class="RktSym"&gt;False&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;If &lt;span class="RktSym"&gt;y&lt;/span&gt; evaluates to a non-&lt;span class="RktVal"&gt;#f&lt;/span&gt; value,
   &lt;span class="RktSym"&gt;x&lt;/span&gt; is not of type &lt;span class="RktSym"&gt;False&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Now, you may be thinking &lt;span class="RktSym"&gt;foo-let&lt;/span&gt; doesn&amp;rsquo;t typecheck because
no one should ever write such a silly program! However, many of Racket&amp;rsquo;s
useful macros expand into code which requires just this sort of
type-based reasoning:&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;foo-match&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Any&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;foo-match&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;match&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;?&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;_&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktVal"&gt;42&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;does&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;not&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;typecheck&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;in&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;Racket&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;version&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;6.1.1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;because&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;match&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;expands&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;into&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;a&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;program&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;utilizing&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;let-bindings&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;It sure would be nice if we could get some of these seemingly simple
programs (and more!) to typecheck without a big refactoring of
the type system...&lt;/p&gt;

&lt;h1&gt;&lt;a name="(part._.A_slight_aside__.What_is_an_object_in_.T.R_)"&gt;&lt;/a&gt;A slight aside: What is an object in TR?&lt;/h1&gt;

&lt;p&gt;In the calculus which describes Typed Racket&amp;rsquo;s type system, an &amp;rsquo;object&amp;rsquo;
is a syntactic representation of an expression. If an expression
&amp;lsquo;has an object,&amp;rsquo; then there is some pure syntactic representation
for the value it will evaluate to. Currently, objects can represent variables
or accesses into immutable values such as &lt;span class="RktSym"&gt;cons&lt;/span&gt; cells or
&lt;span class="RktSym"&gt;structs&lt;/span&gt;. For example:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;table cellpadding="0" cellspacing="0"&gt;
 &lt;tbody&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span style="font-weight: bold"&gt;Racket Expression&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span style="font-weight: bold"&gt;TR Object&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;random&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktVal"&gt;100&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;No Object&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;caar&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;p&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;car&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;car&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;p&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#955;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;string-length&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;s&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;No Object&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#955;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktVal"&gt;42&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;
    &lt;p&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Basically, objects enable the type system derive the same
logical meaning from expressions like &lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#955;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;
or &lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#955;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;
as it does from &lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;.&lt;/p&gt;

&lt;h1&gt;&lt;a name="(part._.A_.Simple_.Solution__.Let-aliasing_.Objects)"&gt;&lt;/a&gt;A Simple Solution: Let-aliasing Objects&lt;/h1&gt;

&lt;p&gt;In desire to keep things simple and maintain compatibility with what
Typed Racket already does so well, I decided to explore adding a simple
aliasing extension to the current type system.&lt;/p&gt;

&lt;h2&gt;&lt;a name="(part._.Let-aliasing_overview)"&gt;&lt;/a&gt;Let-aliasing overview&lt;/h2&gt;

&lt;p&gt;My goal was to implement the following changes:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;Add a function &lt;span class="RktSym"&gt;&amp;#952;&lt;/span&gt; to the type environment which
maps identifiers to objects. By default, &lt;span class="RktSym"&gt;&amp;#952;&lt;/span&gt; just
maps identifiers to themselves.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;span class="RktSym"&gt;&amp;#952;&lt;/span&gt; is extended when a let-expression binds an expression
 with an object to a variable. This extension is only in effect
 while checking the body of that let-expression.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;When typechecking any variable expression,
&lt;span class="RktSym"&gt;x&lt;/span&gt;, pretend your considering the object &lt;span class="RktSym"&gt;o&lt;/span&gt;
(where &lt;span class="RktSym"&gt;o&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;=&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;) instead.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;So, for example, when typechecking the &lt;span style="font-style: italic"&gt;body&lt;/span&gt; of the let-expression in
&lt;span class="RktSym"&gt;foo-let&lt;/span&gt;, we extend &lt;span class="RktSym"&gt;&amp;#952;&lt;/span&gt; with the mapping &lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;
instead of adding the three propositions relating &lt;span class="RktSym"&gt;x&lt;/span&gt; and &lt;span class="RktSym"&gt;y&lt;/span&gt;
we saw earlier:&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;foo-let&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Any-&amp;gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;foo-let&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;let&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;we&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;extend&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;&amp;#952;,&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;mapping&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;'y'&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;to&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;the&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;object&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;'x',&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;cond&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;making&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;references&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;to&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;'y'&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;be&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;viewed&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;y&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;as&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;references&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;to&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;'x'&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;here&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;within&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;else&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktVal"&gt;42&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;the&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;body&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;of&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;the&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;let&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;&lt;a name="(part._.Type_.Judgments)"&gt;&lt;/a&gt;Type Judgments&lt;/h2&gt;

&lt;p&gt;Another way to describe this change is to observe the changes to the
type judgments affecting let-expressions and variables.&lt;/p&gt;

&lt;p&gt;Here are the original typing judgments (in a PLT Redex-ish format)
from &amp;lsquo;Logical Types for Untyped Languages&amp;rsquo; by Tobin-Hochstadt and
Felleisen [&lt;a href="http://dl.acm.org/citation.cfm?id=1863561"&gt;ACM link&lt;/a&gt;]&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Proves&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;------------------------&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktVal"&gt;"T-Var"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-!&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;False&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;False&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;e_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0+&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0-&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;o_0&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;where&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_2&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;cons&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;And&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_0&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Or&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;And&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-!&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;False&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0+&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;And&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;False&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0-&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_2&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;e_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1+&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1-&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;o_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;------------------------&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktVal"&gt;"T-Let"&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;let&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;e_0&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;e_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;o_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;/&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1+&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;o_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;/&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1-&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;o_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;/&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;o_1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;o_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;/&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;e&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;o&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt; is a 5-place relation with the
following arguments:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;span class="RktSym"&gt;&amp;#915;&lt;/span&gt; is the current type environment.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;span class="RktSym"&gt;e&lt;/span&gt; is the expression being typechecked.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;span class="RktSym"&gt;&amp;#964;&lt;/span&gt; is the type of &lt;span class="RktSym"&gt;e&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;The first &lt;span class="RktSym"&gt;&amp;#968;&lt;/span&gt; is what we learn if &lt;span class="RktSym"&gt;e&lt;/span&gt; evaluates
to be a non-&lt;span class="RktVal"&gt;#f&lt;/span&gt; value.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;The second &lt;span class="RktSym"&gt;&amp;#968;&lt;/span&gt; is what we learn if &lt;span class="RktSym"&gt;e&lt;/span&gt; evaluates
to &lt;span class="RktVal"&gt;#f&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;span class="RktSym"&gt;o&lt;/span&gt; is the object of &lt;span class="RktSym"&gt;e&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Proves&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt; is a 2-place relation which holds when the
environment of propositions &lt;span class="RktSym"&gt;&amp;#915;&lt;/span&gt; can prove the proposition &lt;span class="RktSym"&gt;&amp;#968;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt; and &lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-!&lt;/span&gt;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt; are propositions
which mean &lt;span class="RktSym"&gt;x_1&lt;/span&gt; is or is not of some type &lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;, respectively.&lt;/p&gt;

&lt;p&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;o_0&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;/&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt; placed next to something means to
substitute &lt;span class="RktSym"&gt;o_0&lt;/span&gt; for &lt;span class="RktSym"&gt;x_0&lt;/span&gt; within that something.&lt;/p&gt;

&lt;p&gt;Here are the let-aliasing versions that replace those rules (note we add
a place for &lt;span class="RktSym"&gt;&amp;#952;&lt;/span&gt; next to &lt;span class="RktSym"&gt;&amp;#915;&lt;/span&gt;):&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;where&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;o_x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;lookup&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Proves&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;o_x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;------------------------&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktVal"&gt;"T-Var-Alias"&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;o_x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-!&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;False&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;o_x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;False&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;o_x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&amp;#160;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;e_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0+&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0-&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;o_0&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;where&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktVal"&gt;#f&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;equal?&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;o_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;null&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;where&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_2&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;extend&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;o_0&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_2&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_2&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;e_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1+&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1-&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;o_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;------------------------&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktVal"&gt;"T-Let-Alias"&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;let&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;e_0&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;e_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1+&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1-&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;o_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&amp;#160;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;this&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;one&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;is&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;the&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;same&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;as&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;T-Let&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;above&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;but&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;e_0&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;is&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;required&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;to&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;have&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;a&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;null&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;object&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;(i.e.&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;not&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;have&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;an&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;object)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;e_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0+&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0-&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;null&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;where&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_2&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;cons&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;And&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_0&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Or&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;And&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-!&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;False&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0+&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;And&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;False&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_0-&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_2&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;e_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1+&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1-&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;o_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;------------------------&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktVal"&gt;"T-Let-No-Alias"&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;TypeOf&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#952;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#915;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;let&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;x_0&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;e_0&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;e_1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#964;_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;null&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1+&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;null&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#968;_1-&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;null&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;o_1&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;null&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;/&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x_1&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This simple approach allows the type system to seamlessly track let-aliasing
by only slightly modifying the type system&amp;rsquo;s behavior for let-expressions
and variables!&lt;/p&gt;

&lt;p&gt;With this change, TR can now successfully typecheck a variety of new programs!&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;super-foo&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;Any&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;super-foo&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#955;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;match&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;?&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;`&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;_&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;.&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;_&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;.&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;,&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;?&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;cddr&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;`&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;_&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;.&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;_&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktMeta"&gt;.&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;,&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;?&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;pair?&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;p&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;if&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;caddr&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;car&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktSym"&gt;p&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktVal"&gt;41&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;_&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktVal"&gt;42&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;span class="RktCmt"&gt;;;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;typechecks&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;with&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktCmt"&gt;let-aliasing!&lt;/span&gt;&lt;span class="RktMeta"&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Additionally, because this approach prevents several propositions from being
generated (and disjunctions no less!) some programs which took quite a while
to typecheck can now be verified immediately!&lt;/p&gt;

&lt;h1&gt;&lt;a name="(part._.Epilogue)"&gt;&lt;/a&gt;Epilogue&lt;/h1&gt;

&lt;h2&gt;&lt;a name="(part._.So_isn_t_this_just_copy_propagation_)"&gt;&lt;/a&gt;So isn&amp;rsquo;t this just copy propagation?&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s definitely similar &amp;#8212;
 &lt;wbr /&gt; both reason about known equalities between
expressions and have to be aware of mutation (our use of objects handles this)
 &amp;#8212;
 &lt;wbr /&gt; however, we&amp;rsquo;re not modifying the source program as a separate pass. We&amp;rsquo;re keeping
the same program and just trying to edify the typechecker (without adding additional
passes) with the same kinds of insights it could have if it was typehecking a
program that had been rewritten using copy propagation or a similar technique.&lt;/p&gt;

&lt;h2&gt;&lt;a name="(part._.Are_there_any_simple_programs_you_re_still_working_to_typecheck_)"&gt;&lt;/a&gt;Are there any simple programs you&amp;rsquo;re still working to typecheck?&lt;/h2&gt;

&lt;p&gt;Sure! This simple guy doesn&amp;rsquo;t typecheck:&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;size&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;U&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;String&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;size&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;match&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;?&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;_&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;string-length&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Because it expands into something like this:&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;size-expanded&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;let*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;x1&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;f2&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;#955;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;string-length&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;if&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;number?&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x1&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;f2&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let-aliasing almost gets us there, but the environment in which &lt;span class="RktSym"&gt;f2&lt;/span&gt;
is typechecked doesn&amp;rsquo;t know that we&amp;rsquo;re only going to call it if &lt;span class="RktSym"&gt;x1&lt;/span&gt;
is not a number =(&lt;/p&gt;

&lt;p&gt;Perhaps this is an argument for why let-aliasing should be a little more like
copy propagation...? We&amp;rsquo;ll have to do some more digging and find out!&lt;/p&gt;

&lt;h2&gt;&lt;a name="(part._.So_how_much_of_the_.Typed_.Racket_codebase_had_to_change_to_support_this_)"&gt;&lt;/a&gt;So how much of the Typed Racket codebase had to change to support this?&lt;/h2&gt;

&lt;p&gt;Not that much! &lt;a href="https://github.com/racket/typed-racket/pull/2"&gt;Here&amp;rsquo;s&lt;/a&gt; the Github pull request.&lt;/p&gt;

&lt;p&gt;I had to improve TR&amp;rsquo;s ability to update type information inside of
structured types a little (e.g. &lt;span class="RktSym"&gt;cons&lt;/span&gt; cells, &lt;span class="RktSym"&gt;struct&lt;/span&gt;s) since
we no longer had extra variables floating around when we did things
like  &lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;let&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;car&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;p&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;...&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Now when two propositions like &lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Pairof&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;Any&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt; and
&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Pairof&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;Any&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt; are joined, we structurally recur into
the &lt;span class="RktSym"&gt;car&lt;/span&gt; and &lt;span class="RktSym"&gt;cdr&lt;/span&gt; of the type and get the resulting fact
&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;x&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-:&lt;/span&gt;&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;Pairof&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="stt"&gt; &lt;/span&gt;&lt;span class="RktSym"&gt;Number&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;, which was essential to typechecking
programs which use aliases instead of new variables.&lt;/p&gt;

&lt;p&gt;These changes were fairly natural/minor, however, and probably should have been
made at some point even without aliasing. Aliasing just brought the matter
front and center.&lt;/p&gt;

&lt;p&gt;Edits: A few typos&lt;/p&gt;

&lt;h2&gt;&lt;a name="(part._.Update__.What_if_.I_don_t_want_aliasing__)"&gt;&lt;/a&gt;Update: What if I don&amp;rsquo;t want aliasing?!&lt;/h2&gt;

&lt;p&gt;This change, in addition to allowing aliasing, assumes it is the desired
default behavior when typechecking. It was pointed out that with this change,
there are a few programs which &lt;span style="font-style: italic"&gt;used to&lt;/span&gt; typecheck but no longer do:&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;adhoc-min&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;All&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;adhoc-min&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;let&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;a*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;b*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;cond&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;and&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;integer?&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;integer?&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;if&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;lt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b*&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;else&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a*&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This program errors with the following message:
&lt;span style="font-style: italic"&gt;Type Checker: type mismatch. Expected: A.
Given: (U Integer Inexact-Real) in: a*.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This is because previously the absence of aliasing prevented occurrences of
&lt;span class="RktSym"&gt;a*&lt;/span&gt; or &lt;span class="RktSym"&gt;b*&lt;/span&gt; from having their types updated by
type tests on &lt;span class="RktSym"&gt;a&lt;/span&gt; or &lt;span class="RktSym"&gt;b&lt;/span&gt;. If you wanted &lt;span class="RktSym"&gt;a*&lt;/span&gt; or &lt;span class="RktSym"&gt;b*&lt;/span&gt;
to be unnaffected by type tests on &lt;span class="RktSym"&gt;a&lt;/span&gt; or &lt;span class="RktSym"&gt;b&lt;/span&gt;, you can simply
add explicit annotations at the &lt;span class="RktSym"&gt;let&lt;/span&gt;-binding site:&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;adhoc-min2&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;All&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;adhoc-min2&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;let&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;a*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;b*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;cond&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;and&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;integer?&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;integer?&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;if&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;lt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b*&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;else&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a*&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;or use local &lt;span class="RktSym"&gt;define&lt;/span&gt;s to create &lt;span class="RktSym"&gt;a*&lt;/span&gt; and &lt;span class="RktSym"&gt;b*&lt;/span&gt;:&lt;/p&gt;

&lt;div class="SCodeFlow"&gt;
 &lt;table cellpadding="0" cellspacing="0" class="RktBlk"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;:&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;adhoc-min3&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;All&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&lt;span class="nobreak"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;A&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;adhoc-min3&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;define&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;cond&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;and&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;integer?&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;integer?&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;if&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;(&lt;/span&gt;&lt;span class="RktSym"&gt;&amp;lt;&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a*&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;b*&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
   &lt;tr&gt;
    &lt;td&gt;&lt;span class="hspace"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class="RktPn"&gt;[&lt;/span&gt;&lt;span class="RktSym"&gt;else&lt;/span&gt;&lt;span class="hspace"&gt;&amp;nbsp;&lt;/span&gt;&lt;span class="RktSym"&gt;a*&lt;/span&gt;&lt;span class="RktPn"&gt;]&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;span class="RktPn"&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Quicksort in Coq</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2014/11/10/quicksort-in-coq/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2014-11-10-quicksort-in-coq</id>
  <published>2014-11-10T14:01:16Z</published>
  <updated>2014-11-10T14:01:16Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;Coq&amp;rsquo;s support for dependent types mean that type checking not only
catches trivial errors like passing an integer to a function expecting
a string, but it can also check and verify types which represent
properties regarding the functional behavior of the a program.&lt;/p&gt;

&lt;p&gt;I thought it would be edifying to use this capability to write a
verified version of quicksort (i.e. a quicksort with types that
specify its behavior), and it was!&lt;/p&gt;
&lt;!--more--&gt;

&lt;h1&gt;&lt;a name="(part._.Basic_.Quicksort)"&gt;&lt;/a&gt;Basic Quicksort&lt;/h1&gt;

&lt;p&gt;So first let&amp;rsquo;s just write quicksort, and then we&amp;rsquo;ll see
what dependent types can add.&lt;/p&gt;

&lt;h2&gt;&lt;a name="(part._.A_.First_.Attempt)"&gt;&lt;/a&gt;A First Attempt&lt;/h2&gt;

&lt;p&gt;This was my initial attempt at writing quicksort in Coq (first w/o the
more complex types):&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Fixpoint quicksort (l:list nat) : list nat :=
match l with
  | nil =&amp;gt; nil
  | x :: xs =&amp;gt;
      let (lhs, rhs) := partition (gtb x) xs in
      (quicksort lhs) ++ x :: (quicksort rhs)
end.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looked pretty good, I thought! It was nice and simple... until I tried
to compile it:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Error:
Recursive definition of quicksort is ill-formed.
In environment
quicksort : list nat -&amp;gt; list nat
l : list nat
x : nat
xs : list nat
rhs : list nat
lhs : list nat
Recursive call to quicksort has principal argument
equal to "lhs" instead of "xs"...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course - my recursive calls are not structurally recursive
(i.e. they&amp;rsquo;re not on the structural pieces that make up the input),
so Coq isn&amp;rsquo;t convinced our recursive calls will terminate.&lt;/p&gt;

&lt;blockquote class="refpara"&gt;
 &lt;blockquote class="refcolumn"&gt;
  &lt;blockquote class="refcontent"&gt;
   &lt;p&gt;Coq requires all programs to be total and deterministic
to ensure its logic is sound.&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;

&lt;h2&gt;&lt;a name="(part._.Guaranteeing_.Termination)"&gt;&lt;/a&gt;Guaranteeing Termination&lt;/h2&gt;

&lt;p&gt;Doing a little digging, I discover that one way to write
functions which Coq cannot infer termination for is
using the keywords "Program" and "measure":&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Program Fixpoint quicksort
      (l:list nat)
      {measure (length l)} : list nat :=
match l with
| nil =&amp;gt; nil
| x :: xs =&amp;gt;
    match partition (leb x) xs with
    | (rhs, lhs) =&amp;gt;
      (quicksort lhs) ++ x :: (quicksort rhs)
    end
end.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now Coq knows that the decreasing argument to be measured is the
length of the input (from {measure (length l)}), and it knows that I
am... "Program"-ing... err... I mean it may also generate
&lt;span style="font-style: italic"&gt;proof obligations&lt;/span&gt; from this fixpoint definition (which is what
Program specifies).&lt;/p&gt;

&lt;p&gt;Okay, so I compiled it and then I got some new messages (woohoo!).&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;quicksort has type-checked, generating 3 obligation(s)
Solving obligations automatically...
quicksort_obligation_3 is defined
2 obligations remaining
Obligation 1 of quicksort:
forall l : list nat,
(forall l0 : list nat, length l0 &amp;lt; length l -&amp;gt; list nat) -&amp;gt;
forall (x : nat) (xs : list nat),
x :: xs = l -&amp;gt;
let filtered_var := partition (leb x) xs in
forall rhs lhs : list nat, (rhs, lhs) = filtered_var -&amp;gt;
                 length lhs &amp;lt; length l.

Obligation 2 of quicksort:
forall l : list nat,
(forall l0 : list nat, length l0 &amp;lt; length l -&amp;gt; list nat) -&amp;gt;
forall (x : nat) (xs : list nat),
x :: xs = l -&amp;gt;
let filtered_var := partition (leb x) xs in
forall rhs lhs : list nat, (rhs, lhs) = filtered_var -&amp;gt;
                 length rhs &amp;lt; length l.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cool - two obligations. To solve these (which just verify the length
of the inputs to the recursive calls (lhs and rhs) are &amp;lt;= the length
of the original input) I used "Next Obligation of quicksort." twice,
applying a little theorem proving where needed. After proving both, I
got:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;No more obligations remaining
quicksort is defined&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Side note: You may have noticed I swapped out the "let" statement in the
original attempt for a "match" statement - but why? Well, using the
"let" left me proving the facts about lhs and rhs without any evidence
as to where they came from. Match, on the other hand, gave me the
assumption "(lhs, rhs) = partition (gtb x) xs", which was important
since that fact was key to proving their size was less than the
original input. Kind of lame that I couldn&amp;rsquo;t use the let (it seemed
more direct and elegant), but oh well.&lt;/p&gt;

&lt;h1&gt;&lt;a name="(part._.Verified_.Quicksort)"&gt;&lt;/a&gt;Verified Quicksort&lt;/h1&gt;

&lt;p&gt;So writing quicksort wasn&amp;rsquo;t too bad. I learned a little about how
proof obligations work with respect to the termination of
fixpoints. But what about verifying it actually sorts the list we&amp;rsquo;ve
given it? How do we know it is correct?&lt;/p&gt;

&lt;h2&gt;&lt;a name="(part._.Is_testing_good_enough_)"&gt;&lt;/a&gt;Is testing good enough?&lt;/h2&gt;

&lt;p&gt;I could throw a few tests cases at it to feel a little better
about its correctness:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Example qs_nil:
  quicksort [] = [].
Proof.
  auto.
Qed.

Example qs_ex1:
  quicksort [3 ; 2 ; 1] = [1 ; 2 ; 3].
Proof with auto.
  compute...
Qed.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But we still can&amp;rsquo;t be 100% certain it is correct. In fact, in this case
a list reverse would have passed these tests! So in general, what
can we do if we want to &lt;span style="font-style: italic"&gt;formally verify&lt;/span&gt; a program?
In a language like Coq there are multiple ways to do this!&lt;/p&gt;

&lt;h2&gt;&lt;a name="(part._.Proving_.Quicksort_.Correct_with_.Dependent_.Types)"&gt;&lt;/a&gt;Proving Quicksort Correct with Dependent Types&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s two primary approaches to verifying functions in Coq:
You can write a theorem stating quicksort is correct and
prove it valid, or you can add the specification to the type
of quicksort itself. Let&amp;rsquo;s do the latter.&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Program Fixpoint quicksort
      (l:list nat)
      {measure (length l)} :
      {sl : list nat |
        Permutation l sl
        /\ StronglySorted le sl} :=
match l with
| nil =&amp;gt; nil
| x :: xs =&amp;gt;
    match partition (gtb x) xs with
    | (lhs, rhs) =&amp;gt;
      (quicksort lhs) ++ x :: (quicksort rhs)
    end
end.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This approach looks like our original version, except that our return
type is not merely a list of nat, but a list of nat such that it is a
permutation of the original and it is sorted (yes, that is all in the
return type). Obligations for the predicate portion of the return type
(Permutation l sl /\ StronglySorted le sl) must be proven as well if
Coq cannot automatically prove them (and in this case, it cannot).&lt;/p&gt;

&lt;p&gt;The first obligation related to the return type is for the empty list
case (nil), which is trivial (since quicksort merely returns nil,
which is a permutation of nil and is sorted). In the second such
obligation, we assume these properties hold for the recursive calls
(quicksort lhs) and (quicksort rhs) (that they produce sorted
partitions of their input - this is our inductive hypothesis) and
prove these properties are maintained by (quicksort lhs) ++ x ::
(quicksort rhs). With the use of a few lemmas related to partitioning
and appending sorted lists that are related (such as how our two are
in this case) this isn&amp;rsquo;t these properties aren&amp;rsquo;t too bad to verify.&lt;/p&gt;

&lt;p&gt;Suggestions and comments always welcome =)&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Design and Evaluation of Gradual Typing for Python</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2014/10/20/design-and-evaluation-of-gradual-typing-for-python/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2014-10-20-design-and-evaluation-of-gradual-typing-for-python</id>
  <published>2014-10-20T04:00:00Z</published>
  <updated>2014-10-20T04:00:00Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=2661101"&gt;ACM link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At DLS &amp;rsquo;14 with Michael M. Vitousek and Jeremy G. Siek.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="abstract"&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Combining static and dynamic typing within the same language offers clear benefits to programmers. It provides dynamic typing in situations that require rapid prototyping, heterogeneous data structures, and reflection, while supporting static typing when safety, modularity, and efficiency are primary concerns. Siek and Taha (2006) introduced an approach to combining static and dynamic typing in a fine-grained manner through the notion of type consistency in the static semantics and run-time casts in the dynamic semantics. However, many open questions remain regarding the semantics of gradually typed languages.&lt;/p&gt;

&lt;p&gt;In this paper we present Reticulated Python, a system for experimenting with gradual-typed dialects of Python. The dialects are syntactically identical to Python 3 but give static and dynamic semantics to the type annotations already present in Python 3. Reticulated Python consists of a typechecker and a source-to-source translator from Reticulated Python to Python 3. Using Reticulated Python, we evaluate a gradual type system and three approaches to the dynamic semantics of mutable objects: the traditional semantics based on Siek and Taha (2007) and Herman et al. (2007) and two new designs. We evaluate these designs in the context of several third-party Python programs.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">C to Racket Examples</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2014/03/24/c-to-racket-examples/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2014-03-24-c-to-racket-examples</id>
  <published>2014-03-24T13:16:07Z</published>
  <updated>2014-03-24T13:16:07Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;This post is a collection of simple C code snippets and roughly equivalent Racket code.&lt;/p&gt;

&lt;p&gt;Hopefully if you&amp;rsquo;re coming from a C background (or similar) and you&amp;rsquo;re struggling to make sense of Racket code, these examples will assist in clearing the fog.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="more-details"&gt;More details&lt;/h3&gt;

&lt;p&gt;If you wish for a more in depth introduction to Racket, I recommend perusing the excellent &lt;a href="http://docs.racket-lang.org/guide/"&gt;Racket Guide&lt;/a&gt;. If you&amp;rsquo;re curious about a particular function the &lt;a href="http://docs.racket-lang.org/"&gt;Racket manuals&lt;/a&gt; are a great resource. If I&amp;rsquo;ve configured the page correctly, library functions in the code snippets should link to their manual entries.&lt;/p&gt;

&lt;br /&gt;

&lt;p&gt;&lt;em&gt;If your beginning your first venture into the world of  &lt;a href="http://en.wikipedia.org/wiki/Functional_programming"&gt;functional  programming&lt;/a&gt;,  you&amp;rsquo;ll want to do some reading to understand the norms of this world  vs. what&amp;rsquo;s likely been ingrained into your being from years of  imperative programming (sorry I don&amp;rsquo;t have a good reference for this  as I&amp;rsquo;m writing this&amp;hellip;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also, neither the C nor the Racket code is meant to be the epitome  of elegance or ideal programming - they&amp;rsquo;re merely there to  demonstrate how things might be expressed in each language.&lt;/em&gt;&lt;/p&gt;

&lt;br /&gt;

&lt;h2 id="table-of-contents"&gt;Table of Contents&lt;/h2&gt;

&lt;ol&gt;
 &lt;li&gt;&lt;a href="#preproc"&gt;Preprocessor Commands&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#variab"&gt;Values and Variables&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#arith"&gt;Arithmetic&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#struct"&gt;Structures&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#array"&gt;Array Indexing&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#scope"&gt;Local/Scoped Definitions&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#fun"&gt;Functions and Conditionals&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#rec"&gt;Recursion&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#list"&gt;Lists and Loops&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="#other"&gt;Other&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;br /&gt;

&lt;h2 id="preprocpreprocessor-stuff"&gt;&lt;a name="preproc"&gt;&lt;/a&gt;Preprocessor stuff&lt;/h2&gt;

&lt;h4 id="c-includes"&gt;C includes&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdbool.h&amp;gt;
#include &amp;lt;math.h&amp;gt;
#include &amp;lt;ctype.h&amp;gt;
#include &amp;lt;assert.h&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-lang-and-requires"&gt;Racket #lang and requires&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;#lang racket
; we'll just need the testing suite "rackunit"
; the rest is included in the default racket language
(require rackunit)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="variabvalues-and-variables"&gt;&lt;a name="variab"&gt;&lt;/a&gt;Values and Variables&lt;/h2&gt;

&lt;h3 id="declaration-and-initialization"&gt;Declaration and initialization&lt;/h3&gt;

&lt;h4 id="c-data"&gt;C data&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int b1 = true; // true
int b2 = false; // false (only 0 is false)
int x  = 5; // int
int pi = 3.14; // float 
char c = 'a'; // char
char* str = "Hello World!"; // string

int fibs[6] = {0, 1, 1, 2, 3, 5};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-data"&gt;Racket data&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define b1 #t) ; true, #true is equivalent
(define b2 #f) ; false, #false is equivalent (the only false value)
(define x 5) ; exact-integer
(define pi 3.14) ; flonum
(define c #\a) ; character
(define str "Hello World!") ; string

; singly linked list
(define fibslist (list 0 1 1 2 3 5))
; fixed-length array with constant-time access
(define fibsvec (vector 0 1 1 2 3 5))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: small note, by default Racket lists are immutable and vectors are mutable. Alternate versions of either are available as well (see docs).&lt;/p&gt;

&lt;h3 id="assignment-mutation"&gt;Assignment (Mutation)&lt;/h3&gt;

&lt;h4 id="c-assignment-mutation"&gt;C Assignment (Mutation)&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int x = 10; // initialization
x = 5; // assignment/mutation
assert(x == 5);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-mutation"&gt;Racket Mutation&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define x 10) ; initialization
(set! x 5) ; mutation
(check-equal? x 5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="aritharithmetic"&gt;&lt;a name="arith"&gt;&lt;/a&gt;Arithmetic&lt;/h2&gt;

&lt;h4 id="c-math"&gt;C math&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int y = 1 + 2 + 3;
assert(y == 6);

int z = (4 + (2 * 3)) / 5;
assert(z == 2);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-math"&gt;Racket math&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define y (+ 1 2 3))
(check-equal? y 6)

(define z (/ (+ (* 2 3)
                4)
             5))
(check-equal? z 2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="structstructures"&gt;&lt;a name="struct"&gt;&lt;/a&gt;Structures&lt;/h2&gt;

&lt;h3 id="structure-definitions"&gt;Structure Definitions&lt;/h3&gt;

&lt;h4 id="c-structs"&gt;C structs&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;struct point {
    int x;
    int y;
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-structs"&gt;Racket structs&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define-struct point (x y))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: small note, Racket structs are immutable by default. Mutable structs are available (see docs).&lt;/p&gt;

&lt;h3 id="structure-usage"&gt;Structure Usage&lt;/h3&gt;

&lt;h4 id="c-struct-accessors"&gt;C struct accessors&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;struct point p = {.x = 3, .y = 4};
assert(p.x == 3);
assert(p.y == 4);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-struct-accessors"&gt;Racket struct accessors&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define p (point 3 4))
(check-equal? (point-x p) 3)
(check-equal? (point-y p) 4)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="arrayconstant-time-array-access"&gt;&lt;a name="array"&gt;&lt;/a&gt;Constant-time array access&lt;/h2&gt;

&lt;h4 id="c-array-indexing"&gt;C array indexing&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int fibs[6] = {0, 1, 1, 2, 3, 5};
assert(fibs[4] == 3);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-vector-ref"&gt;Racket vector-ref&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define fibs (vector 0 1 1 2 3 5))
(check-equal? (vector-ref fibs 4) 3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="scopelocalscoped-definitions-blocks-and-lets"&gt;&lt;a name="scope"&gt;&lt;/a&gt;Local/Scoped Definitions (blocks and lets)&lt;/h2&gt;

&lt;h4 id="c--blocks"&gt;C {} blocks&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int x = 5;

{
    int x = 10;
    assert(x == 10);
}
    
assert(x == 5);

{
   int x = 1;
   int y = x + 10;
   assert(y == 11);
}

assert(x == 5);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-let-expressions"&gt;Racket let expressions&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define x 5)
(let ([x 10])
  (check-equal? x 10))

(check-equal? x 5)

(let* ([x 1]
       [y (+ x 10)])
  (check-equal? y 11))

(check-equal? x 5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: let* allows definitions to reference identifiers previously declared in the list of let bindings&lt;/em&gt;&lt;/p&gt;

&lt;br /&gt;

&lt;h2 id="funfunction-definitions"&gt;&lt;a name="fun"&gt;&lt;/a&gt;Function Definitions&lt;/h2&gt;

&lt;h3 id="basic-functions"&gt;Basic Functions&lt;/h3&gt;

&lt;h4 id="c-simple-function"&gt;C simple function&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int square(int x) {
    return x * x;
}

assert(square(3) == 9);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-simple-function"&gt;Racket simple function&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (square x)
  (* x x))

(check-equal? (square 3) 9)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: C functions are a series of statements with some specified &amp;ldquo;return&amp;rdquo; statement that dictates what the function call evaluates to (except for void, but you get the idea). Racket functions are more like a mathematical expression that is merely simplified/evaluated to some value and that value is returned.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id="functions-that-require-in-order-execution"&gt;Functions that &lt;em&gt;require&lt;/em&gt; in order execution&lt;/h3&gt;

&lt;h4 id="c-command-line-interaction"&gt;C command line interaction&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int square_input() {
    char str[50];
    int num;

    printf("\n Enter input: ");
    scanf("%[^\n]+", str);

    num = atoi(str);

    return num * num;
}

// Enter number: 7
// 49&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-command-line-interaction--begin"&gt;Racket command line interaction &amp;amp; begin&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (square-input)
  (begin
    (printf "\n Enter number: ")
    (define input (read))
    (* input input)))

; Enter number: 9
; 81&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="functions-with-conditional-control-flow"&gt;Functions with Conditional Control Flow&lt;/h3&gt;

&lt;h4 id="c-if-else"&gt;C if-else&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int int_abs(int x) {
    if (x &amp;lt; 0)
        return (-1) * x;
    else
        return x;
}

assert(int_abs(1) == 1);
assert(int_abs(-1) == 1);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-if-else"&gt;Racket if-else&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (int-abs x)
  (if (&amp;lt; x 0)
      (* -1 x)
      x))

(check-equal? (int-abs 1) 1)
(check-equal? (int-abs -1) 1)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-if-else-if-else-if"&gt;C if-else-if-else-if&amp;hellip;&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;// returns number of real roots that exist
int real_quad_roots(int a, int b, int c) {
    float d = (b*b) - 4.0*a*c;

    if (d &amp;lt; 0) {
        return 0;
    } else if (d == 0) {
        return 1;
    } else {
        return 2;
    }
}

// (2x+2)(x-5) = 2x^2 - 8x - 10
assert(real_quad_roots(2, -8, -10) == 2);
// (x-5)(x-5) = x^2 - 10x + 25
assert(real_quad_roots(1, -10, 25) == 1);
// x^2 + 4   no roots
assert(real_quad_roots(1, 0, 4) == 0);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-if-else-if-else-ie-cond"&gt;Racket if-else-if-else&amp;hellip; &lt;em&gt;i.e.&lt;/em&gt; cond&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (real-quad-roots a b c)
  (let ([d (- (* b b)
              (* 4 a c))])
    (cond
      [(&amp;lt; d 0) 0]
      [(= d 0) 1]
      [else    2])))

(check-equal? (real-quad-roots 2 -8 -10)
              2)
(check-equal? (real-quad-roots 1 -10 25)
              1)
(check-equal? (real-quad-roots 1 0 4)
              0)

; We can also use internal defines instead of a let:
(define (real-quad-roots2 a b c)
  (define d (- (* b b)
               (* 4 a c)))
  (cond
    [(&amp;lt; d 0) 0]
    [(= d 0) 1]
    [else    2]))

; defines inside functions act just like the let version above, and
; you can just stick them in there (they don't have to contain a "body
; expression" like a let)

(check-equal? (real-quad-roots2 2 -8 -10)
              2)
(check-equal? (real-quad-roots2 1 -10 25)
              1)
(check-equal? (real-quad-roots2 1 0 4)
              0)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-function-with-structs"&gt;C function with structs&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;float distance(struct point *p1, 
               struct point *p2) {
    assert(p1 != NULL &amp;amp;&amp;amp; p2 != NULL);

    int dx = p1-&amp;gt;x - p2-&amp;gt;x;
    int dy = p1-&amp;gt;y - p2-&amp;gt;y;

    return sqrt((dx * dx) + (dy * dy));
}

struct point p1 = {.x = 0, .y = 0};
struct point p2 = {.x = 3, .y = 4};
assert(distance(&amp;amp;p1, &amp;amp;p2) == 5);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-function-with-structs"&gt;Racket function with structs&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (distance p1 p2)
  (begin
    (when (not (and (point? p1) 
                    (point? p2)))
      (error 'distance "Error - invalid parameter"))
    (let ([dx (- (point-x p1)
                 (point-x p2))]
          [dy (- (point-y p1)
                 (point-y p2))])
      (sqrt (+ (* dx dx)
               (* dy dy))))))

(define p1 (point 0 0))
(define p2 (point 3 4))
(check-equal? (distance p1 p2) 5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="recrecursive-functions"&gt;&lt;a name="rec"&gt;&lt;/a&gt;Recursive Functions&lt;/h2&gt;

&lt;h4 id="c-recursion"&gt;C recursion&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;long factorial_rec(int n)
{
  if (n == 0)
    return 1;
  else
    return(n * factorial(n-1));
}

assert(factorial(5) == 120);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-recursion"&gt;Racket recursion&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (factorial x)
  (if (zero? x)
      1
      (* x (factorial (sub1 x)))))

(check-equal? (factorial 5) 120)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-recursion-on-linked-lists"&gt;C recursion on linked lists&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;// a non-empty linked list
// is an element (first) followed by
// a linked list (the rest)
struct list {
    int first;
    struct list* rest;
};

int length(struct list* l) {
    if (l == NULL)
        return 0;
    else
        return 1 + length(l-&amp;gt;rest);
}

struct list node3 = {.first = 2, .rest = NULL};
struct list node2 = {.first = 1, .rest = &amp;amp;node3};
struct list node1 = {.first = 0, .rest = &amp;amp;node2};

assert(length(&amp;amp;node1) == 3);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-recursion-on-lists"&gt;Racket recursion on lists&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;
; Lists in Racket?
(check-equal? empty empty)
(check-equal? (list 1) (cons 1 empty))
(check-equal? (list 1 2) (cons 1 (cons 2 empty)))
; list is shorthand for lists built with cons
(check-equal? (first (list 1 2)) 1)
(check-equal? (rest (list 1 2)) (cons 2 empty))

(define (length l)
  (cond
    [(empty? l)
     0]
    [else
     (add1 (length (rest l)))]))

(check-equal? (length (list 0 2 4)) 
              3)
(check-equal? (length (cons 0 (cons 2 (cons 4 empty)))) 
              3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;br /&gt;

&lt;h2 id="listlists-and-loops"&gt;&lt;a name="list"&gt;&lt;/a&gt;Lists and Loops&lt;/h2&gt;

&lt;h4 id="c-recursive-list-building"&gt;C recursive list building&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;// builds list 0 through (i-1) from back
// to front
#define make_range(n) range_loop(n, NULL)
struct list* range_loop(int i, struct list *rest) {
    if (i &amp;gt; 0) {
        struct list *new = malloc(sizeof(struct list));
        new-&amp;gt;first = i - 1;
        new-&amp;gt;rest = rest;

        return range_loop(i - 1, new);
    } 
    else {
        return rest;    
    }
}

struct list *l = make_range(3);
// we verify (painfully) the list is indeed [0, 1, 2]
assert(l-&amp;gt;first == 0);
assert(l-&amp;gt;rest-&amp;gt;first == 1);
assert(l-&amp;gt;rest-&amp;gt;rest-&amp;gt;first == 2);
assert(l-&amp;gt;rest-&amp;gt;rest-&amp;gt;rest == NULL);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-recursive-list-construction-using-a-let-loop"&gt;Racket recursive list construction (using a &amp;ldquo;let-loop&amp;rdquo;)&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;; return list of numbers 0 to (n-1)
(define (make-range n)
  (let range-loop ([i n]
                   [l empty])
    (if (positive? i)
        (range-loop (sub1 i)
                    (cons (sub1 i) l))
        l)))

(check-equal? (make-range 3)
              (list 0 1 2))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-list-sum-with-loop"&gt;C list sum with loop&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int listsum(struct list* l) {
    struct list* i = l;
    int sum = 0;
    while (i != NULL) {
        sum = sum + i-&amp;gt;first;
        i = i-&amp;gt;rest;
    }

    return sum;
}

// make_range from previous example
// builds list of 0 through (n-1)
assert(listsum(make_range(4)) == 6);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-list-sum-with-for-loop"&gt;Racket list sum with for loop&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (listsum l)
  (define sum 0)
  (begin (for ([i l])
           (set! sum (+ sum i)))
         sum))

; make-range from previous example
(check-equal? (listsum (make-range 4)) 6)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-list-building-loop"&gt;C list building loop&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;struct list* n_evens(int n) {
    int i, value;
    struct list *head, *prev;
    head = prev = NULL;

    for (i = 0; i &amp;lt; n; i++) {
        value = 2 * i;
        struct list *new = malloc(sizeof(struct list));
        new-&amp;gt;first = value;
        if (prev != NULL)
            prev-&amp;gt;rest = new;
        else
            head = new;
        prev = new;
    }

    prev-&amp;gt;rest = NULL;

    return head;
}

l = n_evens(3); // l = [0, 2, 4]
assert(l-&amp;gt;first == 0);
assert(l-&amp;gt;rest-&amp;gt;first == 2);
assert(l-&amp;gt;rest-&amp;gt;rest-&amp;gt;first == 4);
assert(l-&amp;gt;rest-&amp;gt;rest-&amp;gt;rest == NULL);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-forlist-loop"&gt;Racket for/list loop&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;; make-range is built into Racket, and is called just range:
(check-equal? (range 3) (list 0 1 2))

; Builds list of the first n even natural numbers
(define (n-evens n)
  (for/list ([i (range n)])
    (* 2 i)))

(check-equal? (n-evens 3) (list 0 2 4))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="c-loop-that-finds-max-integer"&gt;C loop that finds max integer&lt;/h4&gt;

&lt;div class="brush: c"&gt;
 &lt;pre&gt;&lt;code&gt;int max_in_list(struct list *l) {
    int max = l-&amp;gt;first;
    struct list *i = l-&amp;gt;rest;

    while (i != NULL) {
        if (max &amp;lt; i-&amp;gt;first)
            max = i-&amp;gt;first;
        else
            max = max;

        i = i-&amp;gt;rest;
    }

    return max;
}

struct list l3 = {.first = 12, .rest = NULL};
struct list l2 = {.first = 99, .rest = &amp;amp;l3};
struct list l1 = {.first = 42, .rest = &amp;amp;l2};
assert(max_in_list(&amp;amp;l1) == 99);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="racket-forfold-loop-that-finds-max-integer"&gt;Racket for/fold loop that finds max integer&lt;/h4&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define (max-in-list l)
  (for/fold ([max (first l)]) ([i (rest l)])
    (if (&amp;lt; max i)
        i
        max)))

(check-equal? (max-in-list (list 42 99 12)) 99)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Total List Functions</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2014/02/06/total-list-functions/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2014-02-06-total-list-functions</id>
  <published>2014-02-07T03:36:50Z</published>
  <updated>2014-02-07T03:36:50Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;What is the type of a function which returns the first element of a list? One possible (and likely common) answer would be:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(: first (All (X) ((Listof X) -&amp;gt; X)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This (typed racket syntax) says &lt;em&gt;first&lt;/em&gt; is a function from a list of X&amp;rsquo;s to an X (where X is any type). However, we really know that, although its type is ((Listof X) -&amp;gt; X), if we pass an empty list of X we will not get an X, but a runtime error of some sort (e.g. no values). The type then isn&amp;rsquo;t really giving us a guarantee of what it will do for us&amp;hellip; it&amp;rsquo;s just telling us what it will &lt;em&gt;try&lt;/em&gt; to do for us if it doesn&amp;rsquo;t fail.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;No. Try not. Do&amp;hellip; or do not. There is no try.&amp;rdquo; - Master Yoda&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is a parallel in math: some functions are not defined for all possible input values (e.g. f(x)=1/x). These are called partial functions (as opposed to total functions). It is common practice to reserve the term &amp;ldquo;function&amp;rdquo; for total functions in math, while in programming partial functions are ubiquitous and there is little effort to distinguish between the two. If only there was some way that the types could reflect this possibility&amp;hellip;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;&lt;em&gt;Note: The property of being total in theoretical computer science is also referred to as the strong normalization property.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In type theory, the type that has no values is commonly called the &lt;a href="http://en.wikipedia.org/wiki/Bottom_type"&gt;bottom type&lt;/a&gt;. It is often written as ⊥ (\bot in LaTeX). Thus we could say &lt;em&gt;first&lt;/em&gt; has type ((Listof X) -&amp;gt; (U X ⊥)), or in other words, we define our return type as the union of types X and ⊥ to reflect that not returning anything (the bottom type ⊥) is an option.&lt;/p&gt;

&lt;p&gt;Type systems often dodge/ignore this problem by merely guaranteeing that they will prevent all &lt;em&gt;type errors&lt;/em&gt; and not &lt;em&gt;run-time errors&lt;/em&gt;, with a definition of &lt;em&gt;type errors&lt;/em&gt; that to them is reasonable and suites their needs. Lets assume, however, that we did not wish to ignore ⊥ and that we wanted our type checking to provide stronger guarantees about what happens in our program. We could approach this by using a type with an explicit failure case for &lt;em&gt;first&lt;/em&gt; (i.e. wrap the return value in a &amp;ldquo;maybe&amp;rdquo;), thus forcing us to always return a failure value (or similar) instead of error or exit. The other option (and the one we will explore) is to use types which limit the domain of the function so that the function &lt;em&gt;becomes&lt;/em&gt; total (e.g. dissallow empty lists in the type itself so first &lt;em&gt;always&lt;/em&gt; returns an X).&lt;/p&gt;

&lt;h2 id="sigma-types"&gt;Sigma Types&lt;/h2&gt;

&lt;p&gt;In a previous post while examining what a verified version of quicksort might look like, I included the properties I desired &lt;em&gt;in&lt;/em&gt; the return type:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Program Fixpoint quicksort
        (l:list nat) {measure (length l)} :
        {sl : list nat | Permutation l sl
                         /\ StronglySorted le sl} :=&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is, the return type of this function is not merely a list, but a list and a proof it is a permutation of the input and strongly sorted. This was done using Coq&amp;rsquo;s Sigma-types:&lt;/p&gt;

&lt;p&gt;From the Coq manual: &lt;em&gt;Subsets and Sigma-types (sig A P), or more suggestively {x:A | P x}, denotes the subset of elements of the type A which satisfy the predicate P.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Similarly, Sigma-types can help us in our endeavor to devise robust, total list functions.&lt;/p&gt;

&lt;h2 id="writing-a-total-first"&gt;Writing a total &amp;ldquo;first&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;What we really want to do is say that our function &amp;ldquo;first&amp;rdquo; is not merely of type ((Listof X) -&amp;gt; X), but it additionally requires the input list be non-empty and it returns the first element of it.&lt;/p&gt;

&lt;p&gt;Now we can attempt write our total version of first:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Definition strong_first {X:Type} (l:list X) (pf: l &amp;lt;&amp;gt; nil): X :=
match l, pf with
  | nil, _ =&amp;gt; match reflneq pf with end
  | x :: xs, _ =&amp;gt;  x
end.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;strong_first takes a list l and a proof it is not null and returns an X.&lt;/p&gt;

&lt;p&gt;It accomplishes this by matching the list against the possible two structural forms for a list:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nil case&lt;/em&gt;: If it is empty, we use the proof that nil &amp;lt;&amp;gt; nil with the following lemma:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Lemma reflneq {X:Type} : forall x : X, x &amp;lt;&amp;gt; x -&amp;gt; False.
Proof.
  auto.
Qed.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This gives us False within our function, which we use to vacuously satisfy the match statement for the nil case (since False has exactly 0 constructors).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;cons case&lt;/em&gt;: In the cons case, we merely return the first element, x.&lt;/p&gt;

&lt;p&gt;If we were designing a complex system that used this function, if/when we extracted the code out of Coq into another language (OCaml in this case) we get:&lt;/p&gt;

&lt;div class="brush: ocaml"&gt;
 &lt;pre&gt;&lt;code&gt;let strong_first = function
| Nil -&amp;gt; assert false (* absurd case *)
| Cons (x, xs) -&amp;gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And although this function &lt;em&gt;seems&lt;/em&gt; to have the problem we originally sought to solve (it errors on some input allowed by the OCaml type system), this case would &lt;em&gt;never&lt;/em&gt; be reached by any code also verified and extracted in Coq (since the type checking in Coq would have &lt;em&gt;ensured&lt;/em&gt; the list was non-empty). As for whether or not external code calls this function incorrectly (i.e. with an empty list), that is a matter that must be handled separately. One approach would be the way Typed Racket ensures that typed and untyped modules play nicely: it wraps interactions between untyped and typed code in contracts that perform dynamic checks to prevent any such &amp;ldquo;mixed type error.&amp;rdquo;&lt;/p&gt;

&lt;h2 id="a-verified-return-value"&gt;A verified return value&lt;/h2&gt;

&lt;p&gt;We can also, as we did with quicksort, add a specification to the return type via a Sigma-type so our specification is more precise.&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Definition strong_first' {X: Type} (l:list X) (pf: l &amp;lt;&amp;gt; nil):
{x:X| exists xs, l = x :: xs} :=
match l, pf with
  | nil, _ =&amp;gt; match reflneq pf with end
  | x :: xs, _ =&amp;gt; x
end.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, as we see when we try to compile this, we are now returning only the element and not the proof of it&amp;rsquo;s first-ness:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;The term "x" has type "X" while it is expected to have type
{x0 : X | exists xs0 : list X, ?25 = x0 :: xs0}"&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will take this as an opportunity to exploit the ability to change perspectives and instead approach this in Coq&amp;rsquo;s interactive proving mode:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Definition strong_first' {X:Set} :
forall (l : list X) (pf:l &amp;lt;&amp;gt; nil),
  {x : X | exists xs, l = x :: xs}.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a proof goal that matches the signature of the function we wish to write:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt; X : Set
============================
 forall l : list X, l &amp;lt;&amp;gt; nil -&amp;gt;
   {x : X | exists xs : list X, l = x :: xs}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can then use the refine tactic:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;8.2.3 refine term: This tactic applies to any goal. It behaves like exact with a big difference: the user can leave some holes (denoted by&lt;/em&gt; or (&lt;em&gt;:type)) in the term. refine will generate as many subgoals as there are holes in the term. The type of holes must be either synthesized by the system or declared by an explicit cast like (&lt;/em&gt;:nat-&amp;gt;Prop). This low-level tactic can be useful to advanced users._&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;  refine
(fun l pf =&amp;gt;
   match l, pf with
     | nil, _ =&amp;gt; False_rec _ _
     | x :: xs, _ =&amp;gt; exist _ x _
   end).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: We used False_rec instead of the empty match cases we did previously. They&amp;rsquo;re really the same thing when you flesh them all the way out.&lt;/em&gt;&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;False_rec
: forall P : Set, False -&amp;gt; P&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;False_rec just hides some of the machinery and the _ wholes allow us to give Coq&amp;rsquo;s automation a chance to fill in the gaps for us.&lt;/p&gt;

&lt;p&gt;This is what remains in our goals:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;2 subgoals, subgoal 1 (ID 41)

  X : Set
  l : list X
  pf : l &amp;lt;&amp;gt; nil
  pf0 : nil &amp;lt;&amp;gt; nil
  ============================
   False

subgoal 2 (ID 45) is:
 exists xs0 : list X, x :: xs = x :: xs0

Abort.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;From here we can see the resulting goals are relatively simple, and so we can supplement the refine with a call to eauto. We will also define and use some notation which can be useful if writing numerous functions in this fashion:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Notation "&amp;gt;&amp;gt;&amp;lt;&amp;lt;" := (False_rec _ _).
Notation "&amp;gt;&amp;gt; x &amp;lt;&amp;lt;" := (False_rec _ x).
Notation "[ e ]" := (exist _ e _).

Definition strong_first' {X:Set} :
  forall (l : list X) (pf:l &amp;lt;&amp;gt; nil),
    {x : X | exists xs, l = x :: xs}.
  refine
    (fun l pf =&amp;gt;
       match l, pf with
         | nil, _ =&amp;gt; &amp;gt;&amp;gt;&amp;lt;&amp;lt;
         | x :: xs, _ =&amp;gt; [x]
       end); eauto.
Defined.

Extraction strong_first'.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s the same extracted function, and it now has the specified output! Cool.&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;(** val strong_first' : 'a1 list -&amp;gt; 'a1 **)

let strong_first' = function
  | Nil -&amp;gt; assert false (* absurd case *)
  | Cons (x, xs) -&amp;gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let&amp;rsquo;s see if we can apply this strategy to devise a verified list-indexing function!&lt;/p&gt;

&lt;h2 id="verified-list-indexing"&gt;Verified List-Indexing&lt;/h2&gt;

&lt;p&gt;First we define a lemma or two that will be used in our definition:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Lemma lt_list {X:Type} : forall (x:X) xs n,
S n &amp;lt; length (x :: xs) -&amp;gt;
n &amp;lt; length xs.
Proof.
  crush.
Qed.

Lemma ltnil (X:Type): forall n,
n &amp;lt; length nil -&amp;gt; False.
Proof.
  crush.
Qed.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note: I wrote these as I saw I needed them, obviously. By &amp;ldquo;first&amp;rdquo;, I mean we need these defined first =)&lt;/p&gt;

&lt;p&gt;We also define a notion which can capture the idea we have for what it means to return the correct nth item from a list:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Inductive ListIndex {X:Set} : nat -&amp;gt; X -&amp;gt; list X -&amp;gt; Prop :=
| LInil : forall x xs, ListIndex 0 x (x::xs)
| LIcons : forall n x' x xs,
             ListIndex n x' xs -&amp;gt;
             ListIndex (S n) x' (x::xs).
Hint Constructors ListIndex.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And for convenience&amp;hellip; I define a shorter, more clear name for the function that extracts the item out of a sigma type:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Definition sigX := proj1_sig.

Definition strong_nth {X:Set} :
  forall (l : list X) (i : nat) (pf:i &amp;lt; length l),
    {x : X | ListIndex i x l}.
  refine
    (fix f (l:list X) (i:nat) (pf: i &amp;lt; length l) :
       {x : X | ListIndex i x l} :=
       match l, i, pf with
         | x::xs, 0, _ =&amp;gt; [x]
         | x::xs, S i', _ =&amp;gt;  [sigX (f xs i' (lt_list pf))]
         | _, _, _ =&amp;gt; &amp;gt;&amp;gt;ltnil pf&amp;lt;&amp;lt;
       end); crush.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re almost there. The crush tactic derived everything except the details regarding the fact that our recursive call&amp;rsquo;s type is equivalent to (or implies, perhaps) the type we wish to return from the initial call:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt; X : Set
  f : forall (l : list X) (i : nat),
      i &amp;lt; length l -&amp;gt; {x : X | ListIndex i x l}
  l : list X
  i : nat
  pf : i &amp;lt; length l
  x : X
  xs : list X
  pf0 : i &amp;lt; S (length xs)
  i' : nat
  pf1 : S i' &amp;lt; S (length xs)
  ============================
   ListIndex (S i') (sigX (f xs i' (lt_list pf1))) (x :: xs)

Abort.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We simply build a lemma that extends the proof to meet our needs, given what we get from the recursive call and we&amp;rsquo;re good to go:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;Lemma nthrec {X: Set}: forall l i h (x: {x : X | ListIndex i x l}),
i &amp;lt; length l -&amp;gt;
ListIndex (S i) (proj1_sig x) (h::l).
Proof.
  intros.
  destruct x. crush.
Qed.
Hint Resolve nthrec.

Definition strong_nth {X:Set} :
  forall (l : list X) (i : nat) (pf:i &amp;lt; length l),
    {x : X | ListIndex i x l}.
  refine
    (fix f (l:list X) (i:nat) (pf: i &amp;lt; length l) :
       {x : X | ListIndex i x l} :=
       match l, i, pf with
         | x::xs, 0, _ =&amp;gt; [x]
         | x::xs, S i', _ =&amp;gt;  [sigX (f xs i' (lt_list pf))]
         | _, _, _ =&amp;gt; &amp;gt;&amp;gt;ltnil pf&amp;lt;&amp;lt;
       end); crush.
Defined.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So how is this different from our first example (first)?&lt;/p&gt;

&lt;p&gt;I had to explicitly tell it I wanted to derive false from the lemma ltnil. Without that it would &amp;ldquo;complete&amp;rdquo;, but the result would be ill-typed and fail when closing the proof with &amp;ldquo;Defined&amp;rdquo;. Can&amp;rsquo;t leave everything up to automation I guess =) Because of the recursive nature of this function, I had to build a lemma which evaluated the Sigma-type of the recursive call and showed from it we could derive the type we wished to ultimately return.&lt;/p&gt;

&lt;p&gt;And here&amp;rsquo;s what she looks like extracted:&lt;/p&gt;

&lt;div class="brush: coq"&gt;
 &lt;pre&gt;&lt;code&gt;(** val strong_nth : 'a1 list -&amp;gt; nat -&amp;gt; 'a1 **)

let rec strong_nth l i =
  match l with
  | Nil -&amp;gt; assert false (* absurd case *)
  | Cons (x, xs) -&amp;gt;
    (match i with
     | O -&amp;gt; x
     | S i' -&amp;gt; sigX (strong_nth xs i'))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Beautiful!&lt;/p&gt;

&lt;p&gt;Source code related to this post found &lt;a href="https://github.com/sgtamk/sgtamk.github.io/blob/master/snippets/20140206-listbasics-code.v"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: This post is inspired by some of my personal experimenting and some related material from the &amp;ldquo;Subset&amp;rdquo; chapter from &lt;a href="http://adam.chlipala.net/cpdt/"&gt;CPDT&lt;/a&gt; (an excellent Coq resource!).&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Linking the Past: Discovering Historical Social Networks from Documents and Linking to a Genealogical Database</title>
  <link rel="alternate" href="http://www.andmkent.com/blog/2011/09/16/linking-the-past-discovering-historical-social-networks-from-documents-and-linking-to-a-genealogical-database/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-www-andmkent-com:-blog-2011-09-16-linking-the-past-discovering-historical-social-networks-from-documents-and-linking-to-a-genealogical-database</id>
  <published>2011-09-16T04:00:00Z</published>
  <updated>2011-09-16T04:00:00Z</updated>
  <author>
   <name>Andrew M. Kent</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;&lt;a href="http://dl.acm.org/citation.cfm?id=2037351"&gt;ACM link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At HIP &amp;rsquo;11 with Douglas J. Kennard and William A. Barret.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="abstract"&gt;Abstract&lt;/h3&gt;

&lt;p&gt;Historical social networks (HSNs) can be used to inform historical research, including family history and genealogy. In some cases, clues about the structure of an HSN can be found in artifacts of family history such as personal diaries or autobiographical sketches. However, manual inference of such networks can require significant time and effort, including pooling and cross-referencing many different data sources. We present our current research into facilitating that process by automatically finding names in document transcriptions, relating those names to the names found on a roster/list of people who may be talked about in the documents, and automatically generating a social network graph from the result. We link individuals in the social network to a global genealogical database so that people researching their own family histories can easily find their ancestors within the HSNs created in this manner. We also provide examples of how the linked HSNs may be used to inform research about people and situations even when direct information is scarce.&lt;/p&gt;&lt;/html&gt;</content></entry></feed>